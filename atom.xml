<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>啦啦啦拉比克</title>
  
  <subtitle>喜欢的话就坚持吧。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ash1daMANA.github.io/"/>
  <updated>2018-04-13T09:06:48.984Z</updated>
  <id>http://ash1daMANA.github.io/</id>
  
  <author>
    <name>taoyong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx-note1</title>
    <link href="http://ash1daMANA.github.io/2018/04/13/nginx-note1/"/>
    <id>http://ash1daMANA.github.io/2018/04/13/nginx-note1/</id>
    <published>2018-04-13T08:21:38.000Z</published>
    <updated>2018-04-13T09:06:48.984Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Nginx常用记录"><a href="#Nginx常用记录" class="headerlink" title="Nginx常用记录"></a>Nginx常用记录</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p><strong>Nginx</strong> 是一个高性能的 Web 和反向代理服务器, 它具有有很多非常优越的特性:</p><p>作为 Web 服务器：相比 Apache，<strong>Nginx</strong> 使用更少的资源，支持更多的并发连接，体现更高的效率，这点使 <strong>Nginx</strong> 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应，感谢 <strong>Nginx</strong> 为我们选择了 epoll and kqueue 作为开发模型.</p><p>作为负载均衡服务器：<strong>Nginx</strong> 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP代理服务器 对外进行服务。<strong>Nginx</strong> 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。</p><p>作为邮件代理服务器: <strong>Nginx</strong> 同时也是一个非常优秀的邮件代理服务器（最早开发这个产品的目的之一也是作为邮件代理服务器），Last.fm 描述了成功并且美妙的使用经验。</p><p><strong>Nginx</strong> 安装非常的简单，配置文件 非常简洁（还能够支持perl语法），Bugs非常少的服务器: <strong>Nginx</strong> 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在 不间断服务的情况下进行软件版本的升级。</p></blockquote><a id="more"></a><p>这里我主要用了<strong>Nginx</strong>的反向代理以及负载均衡，特以此记录。</p><p><strong>Nginx</strong>的安装具体参考<br><a href="http://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="external">Nginx 安装配置</a><br><a href="https://www.cnblogs.com/zhouxinfei/p/7862285.html" target="_blank" rel="external">Nginx安装及配置详解</a></p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>这里我在服务器上上传了一个spring boot应用，并且copy了一份，修改两个应用的端口分别为<strong>5100</strong>、<strong>5200</strong>，启动应用。上下文路径都为<strong>/MySchool</strong></p><p><img src="./201804130001.jpg" alt="5100日志"></p><p><img src="./201804130002.jpg" alt="5200日志"></p><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><p>进入编译安装的nginx目录，修改配置文件。</p><blockquote><p>cd /usr/local/nginx/conf<br>vi nginx.conf</p></blockquote><p>在http节点里配置虚拟服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    server &#123;</span><br><span class="line">          listen     80;</span><br><span class="line">          server_name  myschool;</span><br><span class="line">          location /MySchool &#123;</span><br><span class="line">              proxy_pass  http://localhost:5100;</span><br><span class="line">           &#125;          </span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动<strong>nginx</strong>  </p><blockquote><p>cd /usr/local/nginx/sbin<br>./nginx</p></blockquote><p>此虚拟服务器监听了80端口的请求，当请求80端口并且uri跟<strong>/MySchool</strong>匹配时，会把这个请求转发到<a href="http://localhost:5100" target="_blank" rel="external">http://localhost:5100</a> ，下面来访问此路径<a href="http://ip:port/MySchool" target="_blank" rel="external">http://ip:port/MySchool</a> 此时的port为80。 如图：</p><p><img src="./201804130003.jpg" alt="访问80端口的页面"></p><p>我们来看一下5100端口应用的日志，</p><p><img src="./201804130004.jpg" alt="5100日志"></p><p>由日志可以看出访问80端口的请求被转发到了5100端口</p><p><br><br><strong>这里有些小坑可能会碰到，需要注意！</strong><br>比如上面配置把 <code>proxy_pass  http://localhost:5100;</code><br>改为 <code>proxy_pass  http://localhost:5100/;</code><br>结果就是访问不到页面  HTTP ERROR 404<br>这里有篇博客可以看一下：<a href="https://blog.csdn.net/tobacco5648/article/details/51099426" target="_blank" rel="external">nginx实现请求转发</a></p><h3 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h3><p>有一些http请求需要访问静态资源时，可以把这些静态资源放在服务器上的某个文件夹内，利用nginx可以做到静态资源的映射。</p><p>在上面的配置文件更改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    server &#123;</span><br><span class="line">          listen     80;</span><br><span class="line">          server_name  myschool;</span><br><span class="line">          location /MySchool &#123;</span><br><span class="line">              proxy_pass  http://localhost:5100;</span><br><span class="line">           &#125;  </span><br><span class="line">           location /MySchool/assets/ &#123;</span><br><span class="line">             root /usr/local/project/myschool/static/file/websource;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           location /MySchool/musik/ &#123;</span><br><span class="line">             root /usr/local/project/myschool/static/file/websource;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           location /MySchool/file/ &#123;</span><br><span class="line">             alias /usr/local/project/myschool/static/file/;</span><br><span class="line">           &#125;        </span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件后重新加载一下，</p><blockquote><p>cd /usr/local/nginx/sbin<br>./nginx -t<br>./nginx -s reload</p></blockquote><p>发起一个静态资源的请求，<a href="http://ip:port/MySchool/file/pictures/mana.jpg" target="_blank" rel="external">http://ip:port/MySchool/file/pictures/mana.jpg</a><br>如图</p><p><img src="./201804130005.jpg" alt="访问静态资源mana.jpg"></p><p>来看一下这个位置的资源<code>/usr/local/project/myschool/static/file/</code></p><p><img src="./201804130006.jpg" alt="资源位置"></p><p><br><br>这里需要注意<strong>root</strong> 与 <strong>alias</strong>的区别 </p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /MySchool/musik/ &#123;</span><br><span class="line">      root /usr/local/project/myschool/static/file/websource;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>当有一个请求为：<code>/MySchool/musik/mana.jpg</code><br>root映射到的路径为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/project/myschool/static/file/websource/MySchool/musik/ mana.jpg</span><br></pre></td></tr></table></figure><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location /MySchool/file/ &#123;</span><br><span class="line">             alias /usr/local/project/myschool/static/file/;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></li></ul><p>当有一个请求为：<code>/MySchool/file/mana.jpg</code><br>alias映射到的路径为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/project/myschool/static/file/mana.jpg</span><br></pre></td></tr></table></figure><p>还有一个很重要的区别就是<strong>alias</strong>后面的路径末尾必须加<strong>“/“</strong> 否则会找不到资源，<br>而<strong>root</strong>后面的路径则无所谓加不加<strong>“/“</strong></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>当一台应用服务器不足以满足需求时，如用户激增，一台应用服务器处理不来高并发的请求时，可以考虑部署多台应用服务器，使用负载均衡的方案来解决，而<strong>nginx</strong>可以帮助做到这一点。</p><p>修改上述配置文件为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">upstream webserver&#123;</span><br><span class="line">    #ip_hash; 保证同一个ip访问同一个后端应用服务器，这样可以保持session</span><br><span class="line">        server localhost:5200 weight=1;</span><br><span class="line">        server localhost:5100 weight=2; ##默认采用轮训</span><br><span class="line">        server localhost:5300 backup; ##备用</span><br><span class="line">        server localhost:5400 down; ##不参与负载均衡 </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    server &#123;</span><br><span class="line">          listen     80;</span><br><span class="line">          server_name  myschool;</span><br><span class="line">          location /MySchool &#123;</span><br><span class="line">              proxy_pass  http://webserver;</span><br><span class="line">           &#125;  </span><br><span class="line">           location /MySchool/assets/ &#123;</span><br><span class="line">             root /usr/local/project/myschool/static/file/websource;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           location /MySchool/musik/ &#123;</span><br><span class="line">             root /usr/local/project/myschool/static/file/websource;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           location /MySchool/file/ &#123;</span><br><span class="line">             alias /usr/local/project/myschool/static/file/;</span><br><span class="line">           &#125;        </span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次请求<a href="http://ip:port/MySchool" target="_blank" rel="external">http://ip:port/MySchool</a> 这里port为80，可以在后端应用服务器5100,5200里可以看到请求的日志，这里就不贴出来了。</p><h2 id="配置HTTPS"><a href="#配置HTTPS" class="headerlink" title="配置HTTPS"></a>配置HTTPS</h2><p>配置https需要证书，可以参考一下这篇文章<a href="https://blog.csdn.net/weixin_35884835/article/details/52588157" target="_blank" rel="external">nginx配置HTTPS</a><br>我这里已经利用openssl生成了密钥跟证书。</p><p><img src="./201804130007.jpg" alt="资源位置/root/nginx/"></p><p><br><br>修改上述配置文件为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">upstream webserver&#123;</span><br><span class="line">    #ip_hash; 保证同一个ip访问同一个后端应用服务器，这样可以保持session</span><br><span class="line">        server localhost:5200 weight=1;</span><br><span class="line">        server localhost:5100 weight=2; ##默认采用轮训</span><br><span class="line">        server localhost:5300 backup; ##备用</span><br><span class="line">        server localhost:5400 down; ##不参与负载均衡 </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    server &#123;</span><br><span class="line">  #listen     80;  #实现http https共存</span><br><span class="line">          listen     443 ssl;</span><br><span class="line">          server_name  myschool;</span><br><span class="line">          ssl_certificate      /root/nginx/server.crt; </span><br><span class="line">          ssl_certificate_key  /root/nginx/server.key;</span><br><span class="line"> </span><br><span class="line">          ssl_session_cache    shared:SSL:1m;</span><br><span class="line">          ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">          ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">          ssl_prefer_server_ciphers  on;</span><br><span class="line">          </span><br><span class="line">          location /MySchool &#123;</span><br><span class="line">              proxy_pass  http://webserver;</span><br><span class="line">           &#125;  </span><br><span class="line">           location /MySchool/assets/ &#123;</span><br><span class="line">             root /usr/local/project/myschool/static/file/websource;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           location /MySchool/musik/ &#123;</span><br><span class="line">             root /usr/local/project/myschool/static/file/websource;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           location /MySchool/file/ &#123;</span><br><span class="line">             alias /usr/local/project/myschool/static/file/;</span><br><span class="line">           &#125;        </span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求<a href="https://ip:port/MySchool" target="_blank" rel="external">https://ip:port/MySchool</a> ，这里port为443 ，如图：</p><p><img src="./201804130008.jpg" alt="访问443端口页面"></p><p>还可以配置多个监听端口，在上述配置里再加一个server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">          listen     8100 ssl;</span><br><span class="line">          server_name  myschool;</span><br><span class="line">          ssl_certificate      /root/nginx/server.crt; </span><br><span class="line">          ssl_certificate_key  /root/nginx/server.key;</span><br><span class="line"> </span><br><span class="line">          ssl_session_cache    shared:SSL:1m;</span><br><span class="line">          ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">          ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">          ssl_prefer_server_ciphers  on;</span><br><span class="line">          location /MySchool &#123;</span><br><span class="line">              proxy_pass  http://webserver;</span><br><span class="line">           &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，443端口跟8100端口都可以进行https访问。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p><strong>参考更多内容</strong><br><a href="https://www.cnblogs.com/zhouxinfei/p/7862285.html" target="_blank" rel="external">Nginx安装及配置详解</a><br><a href="http://www.nginx.cn/doc/" target="_blank" rel="external">Nginx中文文档</a><br><a href="https://blog.csdn.net/hzsunshine/article/details/63687054" target="_blank" rel="external">Nginx简介及配置文件详解</a><br><a href="https://blog.csdn.net/tobacco5648/article/details/51099426" target="_blank" rel="external">nginx实现请求转发</a><br><a href="https://blog.csdn.net/weixin_35884835/article/details/52588157" target="_blank" rel="external">nginx配置HTTPS</a><br><a href="https://segmentfault.com/a/1190000004976222" target="_blank" rel="external">Nginx+Https配置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;Nginx常用记录&quot;&gt;&lt;a href=&quot;#Nginx常用记录&quot; class=&quot;headerlink&quot; title=&quot;Nginx常用记录&quot;&gt;&lt;/a&gt;Nginx常用记录&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt; 是一个高性能的 Web 和反向代理服务器, 它具有有很多非常优越的特性:&lt;/p&gt;
&lt;p&gt;作为 Web 服务器：相比 Apache，&lt;strong&gt;Nginx&lt;/strong&gt; 使用更少的资源，支持更多的并发连接，体现更高的效率，这点使 &lt;strong&gt;Nginx&lt;/strong&gt; 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应，感谢 &lt;strong&gt;Nginx&lt;/strong&gt; 为我们选择了 epoll and kqueue 作为开发模型.&lt;/p&gt;
&lt;p&gt;作为负载均衡服务器：&lt;strong&gt;Nginx&lt;/strong&gt; 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP代理服务器 对外进行服务。&lt;strong&gt;Nginx&lt;/strong&gt; 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。&lt;/p&gt;
&lt;p&gt;作为邮件代理服务器: &lt;strong&gt;Nginx&lt;/strong&gt; 同时也是一个非常优秀的邮件代理服务器（最早开发这个产品的目的之一也是作为邮件代理服务器），Last.fm 描述了成功并且美妙的使用经验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt; 安装非常的简单，配置文件 非常简洁（还能够支持perl语法），Bugs非常少的服务器: &lt;strong&gt;Nginx&lt;/strong&gt; 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在 不间断服务的情况下进行软件版本的升级。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://ash1daMANA.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="负载均衡" scheme="http://ash1daMANA.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="代理" scheme="http://ash1daMANA.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架笔记-HashMap</title>
    <link href="http://ash1daMANA.github.io/2018/04/11/jdknotes-03/"/>
    <id>http://ash1daMANA.github.io/2018/04/11/jdknotes-03/</id>
    <published>2018-04-11T10:07:59.791Z</published>
    <updated>2018-04-11T09:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><p><strong>HashMap</strong>是基于哈希表的Map接口的实现，它提供了所有可选的map操作，并且它允许key和value为null。HashMap与HashTable的主要区别是，HashTable不允许null且它是同步的。</p><p><strong>HashMap</strong>该实现为基本操作（get和put）提供了恒定的性能，假设散列函数在桶之间正确分散元素。 迭代集合视图需要的时间与HashMap实例的“容量”（桶的数量）加上其大小（键值映射的数量）成正比。因此，如果迭代性能很重要，不要将初始容量设置得太高（或者负载因子太低）是非常重要的。</p><p><strong>HashMap</strong>的一个实例有两个影响其性能的参数:初始容量和负载因子。容量是哈希表中的桶数（哈希桶数组的长度），初始容量只是创建哈希表时的容量。负载因子是一个度量，在它的容量自动增加之前，哈希表被允许达到的程度。当哈希表中的条目数（指的是键值对数）超过负载因子和当前容量的乘积时也就是阈值threshold，哈希表被重新散列(也就是说，内部数据结构被重新构建)，这样哈希表就有大约两倍的桶数。具体内容后面resize()会提到。</p><p><strong>HashMap</strong>通常，默认加载因子（0.75）在时间和空间成本之间提供了良好的折衷。<br>较高的值会减少空间开销，但会增加查找成本（反映在大部分HashMap类的操作中，包括get和put）。<br>在设置初始容量时，应考虑映射中的条目数量及其负载因子，以尽量减少重新运行操作（resize）次数。<br><a id="more"></a></p><p><strong>HashMap</strong>如果许多映射要存储在HashMap实例中，使用足够大的容量创建映射将允许映射存储的效率高于根据需要执行自动重新散列以增长表。<br>请注意，使用具有相同{@code hashCode（）}的许多key会减慢任何哈希表的性能。<br>为了改善影响，当键是{@link Comparable}时，这个类可以使用键之间的比较顺序来帮助打破关系。</p><p><strong>HashMap</strong>请注意，此实现不同步。如果多个线程同时访问哈希映射，并且至少有一个线程在结构上修改了映射，则它必须在外部同步。（结构修改是添加或删除一个或多个映射的任何操作;仅更改与实例已包含的键相关的值不是结构修改。）这通常是通过在自然封装map的某个对象上进行同步来完成的。<br>如果不存在这样的对象，则应该使用{@link Collections＃synchronizedMap Collections.synchronizedMap}方法包装该映射。这最好在创建时完成，以防止意外的非同步访问map：Map m = Collections.synchronizedMap（new HashMap（…））;</p><p><strong>HashMap</strong>所有这个类的“集合视图方法”返回的迭代器都是快速失败的：<br>如果在迭代器创建后的任何时候，结构上都会修改映射，除了通过迭代器自己的remove方法之外，迭代器将抛出{@ link ConcurrentModificationException}。<br>因此，面对并发修改，迭代器快速而干净地失败，而不是在将来未定的时间冒着任意的，非确定性的行为冒险。</p><p><strong>HashMap</strong>请注意，迭代器的快速失败行为不能得到保证，因为一般来说，不可能在存在非同步并发修改的情况下做出任何硬性保证。<br>失败快速迭代器尽最大努力抛出ConcurrentModificationException。<br>因此，编写一个依赖于此异常的程序来保证正确性是错误的：迭代器的快速失败行为应该仅用于检测错误。 所以这里不应该用try catch 来尝试捕获异常</p><hr><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li><strong>HashMap</strong>底层是一个哈希桶数组，即链表数组，也是需要动态扩容（JDK1.8中进行了优化，当链表过长时，将链表转换为红黑树）</li><li><strong>HashMap</strong>不允许重复的键，允许重复的值</li><li><strong>HashMap</strong>允许键为null（只允许一个），允许值为null，且键为null的键值对被放在第一位（索引0位置）</li><li><strong>HashMap</strong>不是同步的，而HashTable是同步的</li><li><strong>HashMap</strong> JDK 1.8中 resize后保证了原链表中的顺序</li></ul><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用自定义的初始容量以及负载因子实例化</span><br><span class="line"> *</span><br><span class="line"> **/</span><br><span class="line">   public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">       if (initialCapacity &lt; 0)</span><br><span class="line">           throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +initialCapacity);</span><br><span class="line">       if (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">           initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">       if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class="line">           throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +loadFactor);</span><br><span class="line">       this.loadFactor = loadFactor;</span><br><span class="line">       //tableSizeFor()方法找到大于等于initialCapacity的2的幂</span><br><span class="line">       this.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用自定义的初始容量以及默认的负载因子实例化</span><br><span class="line"> *</span><br><span class="line"> **/</span><br><span class="line">   public HashMap(int initialCapacity) &#123;</span><br><span class="line">       this(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 无参构造 ， 使用默认的负载因子</span><br><span class="line"> *</span><br><span class="line"> **/</span><br><span class="line">   public HashMap() &#123;</span><br><span class="line">       this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用指定的Map映射和默认的负载因子初始化</span><br><span class="line"> * 把指定的Map映射里的键值对添加进去</span><br><span class="line"> **/</span><br><span class="line">   public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</span><br><span class="line">       this.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">       putMapEntries(m, false);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16 </span><br><span class="line"> 假如实例化一个HashMap时没有指定一个初始容量， 那么就会使用这个默认的初始容量。</span><br><span class="line"></span><br><span class="line">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class="line">HashMap的最大容量为 2^30</span><br><span class="line"></span><br><span class="line">static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class="line">假如实例化一个HashMap时没有指定一个负载因子， 那么就会使用这个默认的负载因子。</span><br><span class="line"></span><br><span class="line">transient Node&lt;K,V&gt;[] table; // 哈希桶数组</span><br><span class="line">当第一次向map put值时，这个数组才会被初始化。当需要的时候数组会进行resize</span><br><span class="line">它的长度table.length总是2的自然数幂，为什么是2的幂？这跟它的哈希算法有关</span><br><span class="line"></span><br><span class="line">transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;//主要用于迭代</span><br><span class="line"></span><br><span class="line">transient int size;//键值对的数量 并不是table.length</span><br><span class="line"></span><br><span class="line">transient int modCount;</span><br><span class="line">//HashMap结构上被修改的次数，主要用于迭代时的快速失败机制</span><br><span class="line"></span><br><span class="line">int threshold;//阈值 HashMap所能容纳的key-value键值对极限 threshold=capacity*loadFactor </span><br><span class="line"></span><br><span class="line">final float loadFactor;//负载因子</span><br><span class="line"></span><br><span class="line">static final int TREEIFY_THRESHOLD = 8;//链表转为红黑树的临界节点数</span><br><span class="line">static final int UNTREEIFY_THRESHOLD = 6;//红黑树转为链表的临界节点数</span><br><span class="line">static final int MIN_TREEIFY_CAPACITY = 64;</span><br><span class="line">当哈希表中的容量（table.length）大于等于这个值时，表中的桶才能进行树形化，否则桶内元素太多时会扩容，而不是树形化</span><br></pre></td></tr></table></figure><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node<k,v></k,v></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        final int hash; //哈希算法计算出的哈希值，用来定位数组索引位置</span><br><span class="line">        final K key; // 键值， 上面的就是key的hash值</span><br><span class="line">        V value; // 值</span><br><span class="line">        Node&lt;K,V&gt; next; //下一个节点的引用</span><br><span class="line"></span><br><span class="line">        Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            this.hash = hash;</span><br><span class="line">            this.key = key;</span><br><span class="line">            this.value = value;</span><br><span class="line">            this.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final K getKey()        &#123; return key; &#125;</span><br><span class="line">        public final V getValue()      &#123; return value; &#125;</span><br><span class="line">        public final String toString() &#123; return key + &quot;=&quot; + value; &#125;</span><br><span class="line"></span><br><span class="line">        public final int hashCode() &#123;</span><br><span class="line">            return Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final V setValue(V newValue) &#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final boolean equals(Object o) &#123;</span><br><span class="line">            if (o == this)</span><br><span class="line">                return true;</span><br><span class="line">            if (o instanceof Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                if (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> * hash方法分为三步:</span><br><span class="line"> * 1.取key的hashCode  h=key.hashCode()</span><br><span class="line"> * 2.key的hashCode高16位异或低16位</span><br><span class="line"> * *2.1 h &gt;&gt;&gt; 16表示对h无符号右移16位，高位补0，然后h与h &gt;&gt;&gt; 16按位异或</span><br><span class="line"> * *2.2 通过这种方式计算得到hash值</span><br><span class="line"> * 这里提一下int类型4个字节 32位</span><br><span class="line"> * 3.将第一步和第二步得到的结果进行取模运算。h&amp;(table.length-1)</span><br><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="put"><a href="#put" class="headerlink" title="put"></a>put</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="putVal"><a href="#putVal" class="headerlink" title="putVal"></a>putVal</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">  final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">                 boolean evict) &#123;</span><br><span class="line">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">      //第一次put的时候，table为null 会进行初始化</span><br><span class="line">      if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">          n = (tab = resize()).length;</span><br><span class="line">//通过取模，得到数组的索引，然后判断是否为空</span><br><span class="line">      if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">       //为空的话直接new 一个Node，并把它放在索引位置</span><br><span class="line">          tab[i] = newNode(hash, key, value, null);</span><br><span class="line">      else &#123;</span><br><span class="line">       //数组索引处不为空，首先判断first节点是不是要找的节点，如果是就进行标记</span><br><span class="line">          Node&lt;K,V&gt; e; K k;</span><br><span class="line">          if (p.hash == hash &amp;&amp;</span><br><span class="line">              ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">              e = p;</span><br><span class="line">           //first节点不是我们要找的节点，那么先判断它是不是红黑树</span><br><span class="line">          else if (p instanceof TreeNode)</span><br><span class="line">           //从红黑树上找到这个节点并标记</span><br><span class="line">              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">          else &#123;</span><br><span class="line">           //进入这里了，那么就是普通的链表</span><br><span class="line">              for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                  if ((e = p.next) == null) &#123; //当前节点的下一个节点为null ，那么就new一个Node放在这个节点的后面</span><br><span class="line">                      p.next = newNode(hash, key, value, null);</span><br><span class="line">                      if (binCount &gt;= TREEIFY_THRESHOLD - 1) </span><br><span class="line">                       // -1 for 1st</span><br><span class="line">                       // 循环变量大于阈值8-1  转换为红黑树</span><br><span class="line">                          treeifyBin(tab, hash);</span><br><span class="line">                      break;</span><br><span class="line">                  &#125;</span><br><span class="line">                  //不为空比较是否相同</span><br><span class="line">                  if (e.hash == hash &amp;&amp;</span><br><span class="line">                      ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                      break;</span><br><span class="line">                  p = e; //e 赋给p 保证循环</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          if (e != null) &#123; // existing mapping for key e!=null表示在原来的链表或红黑树中找到了匹配的</span><br><span class="line">              V oldValue = e.value;</span><br><span class="line">              if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                  e.value = value;  //替换原来的value</span><br><span class="line">              afterNodeAccess(e);</span><br><span class="line">              return oldValue;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      //进入到这就是new了Node ，结构上改变了 因此modCount+1，size+1</span><br><span class="line">      ++modCount;</span><br><span class="line">      if (++size &gt; threshold)  //size+1之后判断是否大于阈值</span><br><span class="line">          resize(); //就rehash操作</span><br><span class="line">      afterNodeInsertion(evict);</span><br><span class="line">      return null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回一个哈希桶数组</span><br><span class="line"> */</span><br><span class="line">   final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">       int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">       int oldThr = threshold;</span><br><span class="line">       int newCap, newThr = 0;</span><br><span class="line">       if (oldCap &gt; 0) &#123; //原来的数组长度&gt;0</span><br><span class="line">           if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;  //大于最大容量了不能再扩容</span><br><span class="line">               threshold = Integer.MAX_VALUE; //此时把阈值调大一点</span><br><span class="line">               return oldTab;</span><br><span class="line">           &#125;</span><br><span class="line">           //oldCap左移1位 newCap=2*oldCap</span><br><span class="line">           else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">               //新阈值 为旧阈值两倍</span><br><span class="line">               newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class="line">       &#125;</span><br><span class="line">       //数组长度=0 并且 旧阈值&gt;0 这种情况是在实例化HashMap的时候指定了初始容量，而这个初始容量赋值给了threshold</span><br><span class="line">       else if (oldThr &gt; 0) // initial capacity was placed in threshold 初始容量被塞进threshold</span><br><span class="line">           newCap = oldThr; //然后这里把它设置为新容量</span><br><span class="line">           </span><br><span class="line">       else &#123;               // zero initial threshold signifies using defaults 满足数组长度=0 并且旧阈值=0 ，这种情况就是用了无参构造器 </span><br><span class="line">           newCap = DEFAULT_INITIAL_CAPACITY; //新容量为默认的容量</span><br><span class="line">           newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); //新阈值为 初始容量*默认负载因子</span><br><span class="line">       &#125;</span><br><span class="line">       if (newThr == 0) &#123;</span><br><span class="line">        //如果新阈值==0 为新阈值赋值</span><br><span class="line">           float ft = (float)newCap * loadFactor;</span><br><span class="line">           newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                     (int)ft : Integer.MAX_VALUE);</span><br><span class="line">       &#125;</span><br><span class="line">       //从上面的代码走下来到这,新阈值已经有值了，赋值给属性threshold </span><br><span class="line">       threshold = newThr;</span><br><span class="line">       @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">        //使用新容量创建一个新的哈希桶数组出来并赋值给属性table </span><br><span class="line">           Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">       table = newTab;</span><br><span class="line">       //然后如果原哈希桶数组不是空的话，当然要把原数组中的元素放入新数组中去</span><br><span class="line">       //rehash</span><br><span class="line">       if (oldTab != null) &#123;</span><br><span class="line">           for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">               Node&lt;K,V&gt; e;</span><br><span class="line">               //如果哈希桶数组索引处不为空</span><br><span class="line">               if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">                //把索引处Node节点引用给e 并且数组索引处赋空</span><br><span class="line">                   oldTab[j] = null;</span><br><span class="line">                   if (e.next == null) //此节点没有后续节点，直接把这个单独节点rehash后放入新的哈希桶数组中 做取模运算得到下标</span><br><span class="line">                       newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                   //节点后面还有节点 并且节点属于红黑树 交给红黑树的方法</span><br><span class="line">                   else if (e instanceof TreeNode)</span><br><span class="line">                       ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                   //这个索引处存放的是链表</span><br><span class="line">                   else &#123; // preserve order</span><br><span class="line">                       Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                       Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                       Node&lt;K,V&gt; next;</span><br><span class="line">                       do &#123; //循环链表</span><br><span class="line">                           next = e.next;</span><br><span class="line">                           //把&amp;运算之后==0的节点串成一串链表，按顺序</span><br><span class="line">                           if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                            //第一个节点既是头节点也是尾节点</span><br><span class="line">                            //然后把满足条件的节点放在尾节点后面</span><br><span class="line">                            //此时这个满足条件的节点变成了新的尾节点</span><br><span class="line">                               if (loTail == null)</span><br><span class="line">                                   loHead = e;</span><br><span class="line">                               else</span><br><span class="line">                                   loTail.next = e;</span><br><span class="line">                               loTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                           //把不为0的按原链表顺序串成一串</span><br><span class="line">                           else &#123;</span><br><span class="line">                               if (hiTail == null)</span><br><span class="line">                                   hiHead = e;</span><br><span class="line">                               else</span><br><span class="line">                                   hiTail.next = e;</span><br><span class="line">                               hiTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; while ((e = next) != null);</span><br><span class="line">                       if (loTail != null) &#123;</span><br><span class="line">                           loTail.next = null;//赋空为尾节点</span><br><span class="line">                           newTab[j] = loHead;//把链表的头节点放入原索引处 这样保证了顺序不变</span><br><span class="line">                       &#125;</span><br><span class="line">                       if (hiTail != null) &#123;</span><br><span class="line">                           hiTail.next = null;//赋空为尾节点</span><br><span class="line">                           newTab[j + oldCap] = hiHead;//把链表的头节点放入原索引加旧容量的位置， 保证顺序不变</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       //返回这个新建的哈希桶数组，当然这个</span><br><span class="line">       return newTab;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public V get(Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    //这里主要调用了getNode方法</span><br><span class="line">    //注意返回的null值可能是没找到这个节点 或者是这个节点对应的value为null</span><br><span class="line">    return (e = getNode(hash(key), key)) == null ? null : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getNode"><a href="#getNode" class="headerlink" title="getNode"></a>getNode</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">        (first = tab[(n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">        if (first.hash == hash &amp;&amp; // always check first node</span><br><span class="line">            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k)))) //始终检查索引处的第一个节点是否满足</span><br><span class="line">            return first;</span><br><span class="line">        if ((e = first.next) != null) &#123; //下面就是遍历链表或红黑树了</span><br><span class="line">            if (first instanceof TreeNode)</span><br><span class="line">                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            do &#123;</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                    return e;</span><br><span class="line">            &#125; while ((e = e.next) != null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey"></a>containsKey</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//containsKey 根据key的hash值可以判断出位于哈希桶数组中的位置</span><br><span class="line">//然后在该索引处遍历链表或者红黑树</span><br><span class="line">public boolean containsKey(Object key) &#123;</span><br><span class="line">        return getNode(hash(key), key) != null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="containsValue"><a href="#containsValue" class="headerlink" title="containsValue"></a>containsValue</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//containsValue就是遍历哈希桶数组 找到每一个桶中的每一个节点</span><br><span class="line">//去比较是否与目标参数相同  性能会比较差</span><br><span class="line">   public boolean containsValue(Object value) &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; V v;</span><br><span class="line">       if ((tab = table) != null &amp;&amp; size &gt; 0) &#123;</span><br><span class="line">           for (int i = 0; i &lt; tab.length; ++i) &#123;</span><br><span class="line">               for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) &#123;</span><br><span class="line">                   if ((v = e.value) == value ||</span><br><span class="line">                       (value != null &amp;&amp; value.equals(v)))</span><br><span class="line">                       return true;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return false;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="putMapEntries"><a href="#putMapEntries" class="headerlink" title="putMapEntries"></a>putMapEntries</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">final void putMapEntries(Map&lt;? extends K, ? extends V&gt; m, boolean evict) &#123;</span><br><span class="line">    int s = m.size();</span><br><span class="line">    if (s &gt; 0) &#123; </span><br><span class="line">        if (table == null) &#123; // pre-size 这时就是new HashMap table为null</span><br><span class="line">            float ft = ((float)s / loadFactor) + 1.0F;</span><br><span class="line">            int t = ((ft &lt; (float)MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (int)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            if (t &gt; threshold) //t大于指定的阈值 或者阈值没有指定=0</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (s &gt; threshold) //table不为null且 s大于threshold</span><br><span class="line">            resize();</span><br><span class="line">            //遍历目标map映射，取出key和value放入此map中</span><br><span class="line">        for (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, false, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr><p><strong>HashMap更多内容</strong></p><p><a href="https://www.jianshu.com/p/b40fd341711e" target="_blank" rel="external">HashMap 源码分析</a><br><a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="external">Java8系列之重新认识HashMap</a><br><a href="https://blog.csdn.net/qq_27093465/article/details/52270519" target="_blank" rel="external">Java HashMap中在resize()时候的rehash,即再哈希法的理解</a><br><a href="https://blog.csdn.net/bnmb888/article/details/77164485" target="_blank" rel="external">java集合之HashMap的扩容resize</a><br><a href="https://github.com/wupeixuan/JDKSourceCode1.8/blob/master/src/java/util/HashMap.java" target="_blank" rel="external">JDKSourceCode1.8</a><br><a href="https://github.com/seaswalker/JDK/blob/master/note/HashMap/hashmap.md#resize" target="_blank" rel="external">JDK</a><br>JDK1.7的HashMap <a href="https://blog.csdn.net/eson_15/article/details/51158865" target="_blank" rel="external">java集合框架08——HashMap和源码分析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;HashMap&lt;/strong&gt;是基于哈希表的Map接口的实现，它提供了所有可选的map操作，并且它允许key和value为null。HashMap与HashTable的主要区别是，HashTable不允许null且它是同步的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HashMap&lt;/strong&gt;该实现为基本操作（get和put）提供了恒定的性能，假设散列函数在桶之间正确分散元素。 迭代集合视图需要的时间与HashMap实例的“容量”（桶的数量）加上其大小（键值映射的数量）成正比。因此，如果迭代性能很重要，不要将初始容量设置得太高（或者负载因子太低）是非常重要的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HashMap&lt;/strong&gt;的一个实例有两个影响其性能的参数:初始容量和负载因子。容量是哈希表中的桶数（哈希桶数组的长度），初始容量只是创建哈希表时的容量。负载因子是一个度量，在它的容量自动增加之前，哈希表被允许达到的程度。当哈希表中的条目数（指的是键值对数）超过负载因子和当前容量的乘积时也就是阈值threshold，哈希表被重新散列(也就是说，内部数据结构被重新构建)，这样哈希表就有大约两倍的桶数。具体内容后面resize()会提到。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HashMap&lt;/strong&gt;通常，默认加载因子（0.75）在时间和空间成本之间提供了良好的折衷。&lt;br&gt;较高的值会减少空间开销，但会增加查找成本（反映在大部分HashMap类的操作中，包括get和put）。&lt;br&gt;在设置初始容量时，应考虑映射中的条目数量及其负载因子，以尽量减少重新运行操作（resize）次数。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://ash1daMANA.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ash1daMANA.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架笔记-LinkedList</title>
    <link href="http://ash1daMANA.github.io/2018/03/20/jdknotes-02/"/>
    <id>http://ash1daMANA.github.io/2018/03/20/jdknotes-02/</id>
    <published>2018-03-20T07:28:30.927Z</published>
    <updated>2018-01-17T15:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><p><strong>LinkedList</strong>是List和Deque接口的双向链表的实现，实现了List接口的所有可选操作，它允许存储包括null值所有元素。</p><p><strong>LinkedList</strong>不是同步的。如果多个线程并发访问一个链表，其中至少一个线程改变了链表的结构，那么它必须保持外部同步。（结构上的修改是指添加或删除一个或多个元素的任何操作，单单的只是设置值，结构不会发生变化。）这通常是通过在自然封装列表的某个对象上同步完成的。<br>如果没有这样的对象，我们可以通过使用<code>Collections.synchronizedList</code>方法，<br>如：<code>List list = Collections.synchronizedList(new LinkedList(...));</code></p><h2 id="LinkedList特点"><a href="#LinkedList特点" class="headerlink" title="LinkedList特点"></a>LinkedList特点</h2><ul><li>LinkedList是通过节点彼此之间的联系来实现链表的，每一个节点都包含前一个节点的引用，后一个节点的引用和节点存储的值。LinkedList的节点在内存空间上不是连续的<br><br></li><li>当一个新节点插入时，只需要修改其中保持先后关系的节点的引用即可，当删除记录时也一样，所以LinkedList插入删除的速度非常快;但是读取时，LinkedList.get(i)需要遍历链表，故随机访问的速度慢。<br><br><a id="more"></a></li><li>LinkedList还提供了一些栈、队列、双端队列的操作方法，因此可以用LinkedList来作为stack、queue、deque数据结构的使用。<br><br></li><li>与ArrayList一样，LinkedList的迭代器存在“快速失败行为”，在迭代器遍历的过程中，不允许使用LinkedList.add()、LinkedList.remove()等修改数据结构的方法，否则将抛出异常。<br><br></li><li>LinkedList是有序的，允许重复，支持null元素。LinkedList非同步的，是线程不安全的。<br><br></li><li>LinkedList空间上的浪费体现在，每添加一个元素都会new一个Node对象，1000个元素会有1000个Node对象；ArrayList空间上的浪费体现在，存放元素的内部数组，会在末尾预留一部分空间出来。</li></ul><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//元素数量</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Pointer to first node. 指向前一个首（head）节点</span></span><br><span class="line"><span class="comment">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">     *            (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Pointer to last node. 指向后一个尾（tail）节点</span></span><br><span class="line"><span class="comment">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">     *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list. 无参构造函数，构造一个空的链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment">     * collection, in the order they are returned by the collection's</span></span><br><span class="line"><span class="comment">     * iterator.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     * 有参构造，参数是collection，把参数集合的元素全部添加到此链表中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="comment">//调用addAll方法</span></span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends all of the elements in the specified collection to the end of</span></span><br><span class="line"><span class="comment">     * 添加指定的集合里的所有元素到这个链表的尾部，他们的顺序根据指定集合的迭代器</span></span><br><span class="line"><span class="comment">     * this list, in the order that they are returned by the specified</span></span><br><span class="line"><span class="comment">     * collection's iterator.  The behavior of this operation is undefined if</span></span><br><span class="line"><span class="comment">     * 这个行为是不确定的，因为当操作进行中的时候，指定的集合改变了，请注意到</span></span><br><span class="line"><span class="comment">     * 这个是有可能会发生的，如果指定的集合就是当前的这个链表，并且它是非空的</span></span><br><span class="line"><span class="comment">     * the specified collection is modified while the operation is in</span></span><br><span class="line"><span class="comment">     * progress.  (Note that this will occur if the specified collection is</span></span><br><span class="line"><span class="comment">     * this list, and it's nonempty.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts all of the elements in the specified collection into this</span></span><br><span class="line"><span class="comment">     * list, starting at the specified position.  Shifts the element</span></span><br><span class="line"><span class="comment">     * currently at that position (if any) and any subsequent elements to</span></span><br><span class="line"><span class="comment">     * the right (increases their indices).  The new elements will appear</span></span><br><span class="line"><span class="comment">     * in the list in the order that they are returned by the</span></span><br><span class="line"><span class="comment">     * specified collection's iterator.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index at which to insert the first element</span></span><br><span class="line"><span class="comment">     *              from the specified collection</span></span><br><span class="line"><span class="comment">     *  从指定的集合中插入的第一个元素的所在下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment">     * 指定的集合，其中的元素将全部插入链表中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * 返回true，如果这个链表因此而改变的话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     * 将集合从指定位置开始插入，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);<span class="comment">//检查下标是否合法0&lt;=index&lt;=size</span></span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();<span class="comment">//调用集合的toArray方法转换成Object数组</span></span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;<span class="comment">//获取Object数组的长度</span></span><br><span class="line">        <span class="keyword">if</span> (numNew == <span class="number">0</span>)<span class="comment">//若长度为0 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; pred, succ;<span class="comment">//定义两个引用变量 </span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123; <span class="comment">//这个下标等于长度 即在尾部插入</span></span><br><span class="line">            succ = <span class="keyword">null</span>; <span class="comment">//succ为null index==size的时候这个位置是为null的</span></span><br><span class="line">            pred = last; <span class="comment">//把当前的尾部节点的引用给pred （size-1的节点给pred）</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            succ = node(index); <span class="comment">//node(index)取得下标为index的节点给succ</span></span><br><span class="line">            pred = succ.prev; <span class="comment">//succ的前驱节点给pred</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//遍历Object数组</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;<span class="comment">//转换成E类型</span></span><br><span class="line">            <span class="comment">//new一个节点，prev为pred，元素值为e，next为null</span></span><br><span class="line">            Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="keyword">null</span>) <span class="comment">//在首部插入，</span></span><br><span class="line">                first = newNode;<span class="comment">//newNode 作为首节点</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pred.next = newNode; <span class="comment">//succ的前驱节点的后继节点的引用变为newNode</span></span><br><span class="line">            pred = newNode;<span class="comment">//把newNode赋给pred，这样一个新节点接着一个新节点</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//succ 是index下标的值，若为null，即index==size的时候</span></span><br><span class="line">        <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = pred;<span class="comment">//经过上面的循环 pred为最后new的一个新节点，赋为尾节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//若不为null 即在中间位置插入</span></span><br><span class="line">            pred.next = succ; <span class="comment">// 把node(index)节点即succ作为pred的后继节点</span></span><br><span class="line">            succ.prev = pred; <span class="comment">// 把pred 作为succ的前驱节点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size += numNew; <span class="comment">//插入完成，链表的长度size+c.toArray.length=新的size</span></span><br><span class="line">        modCount++; <span class="comment">//改变次数+1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 静态内部类Node 代表一个节点</span></span><br><span class="line"><span class="comment">* 一个节点保存一个元素，且存有当前节点前一个以及后一个节点的引用</span></span><br><span class="line"><span class="comment">* 即保存了当前节点的元素和节点前后两端节点的内存地址</span></span><br><span class="line"><span class="comment">* 当只有一个节点时，此节点的prev跟next为null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Links e as first element.</span></span><br><span class="line"><span class="comment">     * 在链表的首部插入元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前first节点的引用</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="comment">//new一个新节点，此节点的prev节点为null，存储的元素为e，next节点为first节点</span></span><br><span class="line">        <span class="comment">//第一个节点(first)都在这个新节点之后一个了，所以这个新节点理所当然的为首节点了</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">        <span class="comment">//所以接下来把新节点的引用给first</span></span><br><span class="line">        first = newNode;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="keyword">null</span>) <span class="comment">//原first节点值为null，就是一个空链表</span></span><br><span class="line">            last = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            f.prev = newNode; <span class="comment">//设置原first节点prev为新节点</span></span><br><span class="line">        size++; <span class="comment">//元素值+1</span></span><br><span class="line">        modCount++; <span class="comment">//数据结构的改变次数+1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Links e as last element.</span></span><br><span class="line"><span class="comment">     * 在尾部插入一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;<span class="comment">//获取到当前尾部节点的引用</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);<span class="comment">//new一个新的节点作为尾部节点，此newNode的prev为last节点，节点值为e，next节点为null，</span></span><br><span class="line">        <span class="comment">//既然这个新节点的前一个节点是l(last)节点，所以理应当此时新节点为尾部的节点      </span></span><br><span class="line">        last = newNode;<span class="comment">//新节点的引用给last节点</span></span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>) <span class="comment">//若原last节点为null，则说明原来是个空链表</span></span><br><span class="line">            first = newNode; <span class="comment">//那么把新节点也赋值给首节点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = newNode;<span class="comment">//否则就把新节点赋值给原尾部节点的next属性,就是说原来的last节点的后一个节点就是newNode</span></span><br><span class="line">        size++;<span class="comment">//链表长度+1</span></span><br><span class="line">        modCount++;<span class="comment">//修改结构次数+1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts element e before non-null Node succ.</span></span><br><span class="line"><span class="comment">     * 在某个非空节点之前插入一个元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert succ != null;</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;<span class="comment">//取得非空节点的prev节点的引用给pred</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);<span class="comment">//既然在非空节点succ之前插入，那么这个元素是在succ跟pred之间</span></span><br><span class="line">        <span class="comment">//所以new一个新节点newNode，prev为pred，next为succ，节点值为e</span></span><br><span class="line">        succ.prev = newNode;<span class="comment">//然后把newNode设为succ的prev节点，因为newNode在succ之前嘛</span></span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="keyword">null</span>)<span class="comment">//如果pred为null ，那么代表succ是首节点，所以这时首节点变为newNode</span></span><br><span class="line">            first = newNode;<span class="comment">//newNode 为首节点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pred.next = newNode; <span class="comment">//否则pred的next节点就是这个新节点</span></span><br><span class="line">        size++;<span class="comment">//链表长度+1</span></span><br><span class="line">        modCount++;<span class="comment">//结构改变次数+1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unlinks non-null first node f.</span></span><br><span class="line"><span class="comment">     * 删除非空的首节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert f == first &amp;&amp; f != null; f为first节点且不为空，也就是不是空链表</span></span><br><span class="line">        <span class="keyword">final</span> E element = f.item;<span class="comment">//取得首节点的元素值，</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; next = f.next;<span class="comment">//取得首节点的next值</span></span><br><span class="line">        f.item = <span class="keyword">null</span>;<span class="comment">//赋空。 帮助GC回收</span></span><br><span class="line">        f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">        first = next;<span class="comment">//这里把next节点的引用给first，</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>)<span class="comment">//next为null的话，原链表只有一个节点</span></span><br><span class="line">            last = <span class="keyword">null</span>;<span class="comment">//那么把last赋为null</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next.prev = <span class="keyword">null</span>;否则就把next节点的prev设为<span class="keyword">null</span></span><br><span class="line">        size--;<span class="comment">//长度-1</span></span><br><span class="line">        modCount++;<span class="comment">//数据结构改变次数+1</span></span><br><span class="line">        <span class="keyword">return</span> element;<span class="comment">//返回原首节点的元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unlinks non-null last node l.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert l == last &amp;&amp; l != null;</span></span><br><span class="line">        <span class="keyword">final</span> E element = l.item;<span class="comment">//把尾节点的元素的引用给element</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;<span class="comment">//取得尾节点的prev节点</span></span><br><span class="line">        l.item = <span class="keyword">null</span>;<span class="comment">//help GC</span></span><br><span class="line">        l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">        last = prev;<span class="comment">//把prev节点赋为尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>)<span class="comment">//若prev为null，即原链表里只有一个节点</span></span><br><span class="line">            first = <span class="keyword">null</span>;<span class="comment">//那么把first节点赋为null</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev.next = <span class="keyword">null</span>;<span class="comment">//否则prev的next节点为null,因为prev为尾节点了，后面肯定没值了</span></span><br><span class="line">        size--;<span class="comment">//长度-1</span></span><br><span class="line">        modCount++;<span class="comment">//结构修改次数+1</span></span><br><span class="line">        <span class="keyword">return</span> element;<span class="comment">//返回删除的这个元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unlinks non-null node x.</span></span><br><span class="line"><span class="comment">     * 删除不为空的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert x != null;</span></span><br><span class="line">        <span class="keyword">final</span> E element = x.item;<span class="comment">//取得参数节点的元素</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; next = x.next;<span class="comment">//取得参数节点的next节点</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;<span class="comment">//取得参数节点的prev节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;<span class="comment">//若prev为null，说明此参数节点为首节点</span></span><br><span class="line">            first = next;<span class="comment">//则把此参数节点的后继节点赋为首节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;<span class="comment">//把后继节点的引用给前驱节点的next节点，这样就连起来了</span></span><br><span class="line">            x.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;<span class="comment">//若next为null，说明此参数节点为尾节点</span></span><br><span class="line">            last = prev;<span class="comment">//则把此参数节点的prev节点设为尾节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;<span class="comment">//否则把此参数的prev节点赋值给此参数的next节点的prev</span></span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x.item = <span class="keyword">null</span>; <span class="comment">//help GC</span></span><br><span class="line">        size--;<span class="comment">//长度-1</span></span><br><span class="line">        modCount++;<span class="comment">//改变次数+1</span></span><br><span class="line">        <span class="keyword">return</span> element;<span class="comment">//返回元素值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the first element in this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the first element in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment">     * 获取首节点的元素值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> f.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the last element in this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the last element in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment">     * 获取尾节点的元素值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> l.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes and returns the first element from this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the first element from this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment">     * 删除首节点 并返回首节点的元素值， 调用的是上面的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes and returns the last element from this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the last element from this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment">     * //删除尾节点，并返回尾节点的元素值，若为空，抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts the specified element at the beginning of this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment">     * 在链表首部插入指定的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #add&#125;.</span></span><br><span class="line"><span class="comment">     * 这个方法跟add()方法等效，也就是add()方法默认在尾部插入元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment">     * 在链表尾部插入指定的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if this list contains the specified element.</span></span><br><span class="line"><span class="comment">     * 如果这个链表包含指定的元素， 返回true</span></span><br><span class="line"><span class="comment">     * More formally, returns &#123;<span class="doctag">@code</span> true&#125; if and only if this list contains</span></span><br><span class="line"><span class="comment">     * 只要这个链表至少包含一个即可，</span></span><br><span class="line"><span class="comment">     * at least one element &#123;<span class="doctag">@code</span> e&#125; such that</span></span><br><span class="line"><span class="comment">     * 当o==null，e==null时，两者相等，或者o.equals(e)为true</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element whose presence in this list is to be tested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list contains the specified element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of elements in this list.</span></span><br><span class="line"><span class="comment">     * 返回这个链表包含的元素的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of elements in this list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #addLast&#125;.</span></span><br><span class="line"><span class="comment">     * 这个方法等效于addLast()方法 ，此方法有返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the first occurrence of the specified element from this list,</span></span><br><span class="line"><span class="comment">     * if it is present.  If this list does not contain the element, it is</span></span><br><span class="line"><span class="comment">     * 删除目标对象，如果有的话</span></span><br><span class="line"><span class="comment">     * 而且删除的是第一次出现的位置(lowest index)</span></span><br><span class="line"><span class="comment">     * unchanged.  More formally, removes the element with the lowest index</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> i&#125; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * (if such an element exists).  Returns &#123;<span class="doctag">@code</span> true&#125; if this list</span></span><br><span class="line"><span class="comment">     * contained the specified element (or equivalently, if this list</span></span><br><span class="line"><span class="comment">     * changed as a result of the call).</span></span><br><span class="line"><span class="comment">     * 分两种情况，1. o == null  2. o != null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list contained the specified element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//若o 等于null</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从首节点开始遍历，</span></span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//删除这个节点</span></span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes all of the elements from this list.</span></span><br><span class="line"><span class="comment">     * The list will be empty after this call returns.</span></span><br><span class="line"><span class="comment">     * 移除这个链表中的所有元素，经过这个操作，这个链表会为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Clearing all of the links between nodes is "unnecessary", but:</span></span><br><span class="line">        <span class="comment">// - helps a generational GC if the discarded nodes inhabit</span></span><br><span class="line">        <span class="comment">//   more than one generation</span></span><br><span class="line">        <span class="comment">// - is sure to free memory even if there is a reachable Iterator</span></span><br><span class="line">        <span class="comment">//遍历链表，把每个节点的前置节点，节点元素，后继节点赋为null，方便GC回收</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;E&gt; next = x.next;</span><br><span class="line">            x.item = <span class="keyword">null</span>;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">            x.prev = <span class="keyword">null</span>;</span><br><span class="line">            x = next;</span><br><span class="line">        &#125;</span><br><span class="line">        first = last = <span class="keyword">null</span>;<span class="comment">// 首尾节点赋为空</span></span><br><span class="line">        size = <span class="number">0</span>;<span class="comment">//链表长度为0</span></span><br><span class="line">        modCount++;<span class="comment">//结构改变次数+1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Positional Access Operations</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the element at the specified position in this list.</span></span><br><span class="line"><span class="comment">     * 返回在链表中指定位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index of the element to return</span></span><br><span class="line"><span class="comment">     * 指定位置 要返回元素的下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element at the specified position in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index); <span class="comment">//检查下标的合法性</span></span><br><span class="line">        <span class="keyword">return</span> node(index).item; <span class="comment">//返回这个位置的节点的元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Replaces the element at the specified position in this list with the</span></span><br><span class="line"><span class="comment">     * specified element.</span></span><br><span class="line"><span class="comment">     * 在指定的下标位置替换为指定的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index of the element to replace</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element element to be stored at the specified position</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element previously at the specified position</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index); <span class="comment">//检查下标的合法性</span></span><br><span class="line">        Node&lt;E&gt; x = node(index); <span class="comment">//获取到这个下标的节点赋给x</span></span><br><span class="line">        E oldVal = x.item; <span class="comment">//把替换前的元素赋值给oldVal</span></span><br><span class="line">        x.item = element; <span class="comment">//把指定的element元素赋值给这个节点</span></span><br><span class="line">        <span class="keyword">return</span> oldVal; <span class="comment">//返回旧值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts the specified element at the specified position in this list. </span></span><br><span class="line"><span class="comment">     * 在指定的位置插入指定的元素</span></span><br><span class="line"><span class="comment">     * Shifts the element currently at that position (if any) and any</span></span><br><span class="line"><span class="comment">     * subsequent elements to the right (adds one to their indices).</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index at which the specified element is to be inserted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element element to be inserted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index); <span class="comment">//检查下标的合法性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == size) <span class="comment">//若index==size ，即在链表尾部插入</span></span><br><span class="line">            linkLast(element);  </span><br><span class="line">        <span class="keyword">else</span>   <span class="comment">//否则在这个下标的节点前添加元素</span></span><br><span class="line">            linkBefore(element, node(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the element at the specified position in this list.  Shifts any</span></span><br><span class="line"><span class="comment">     * subsequent elements to the left (subtracts one from their indices).</span></span><br><span class="line"><span class="comment">     * Returns the element that was removed from the list.</span></span><br><span class="line"><span class="comment">     * 移除在指定位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index the index of the element to be removed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element previously at the specified position</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index); <span class="comment">//检查下标的合法性</span></span><br><span class="line">        <span class="keyword">return</span> unlink(node(index)); <span class="comment">//移除并返回这个节点 node（index）返回此下标的节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tells if the argument is the index of an existing element.</span></span><br><span class="line"><span class="comment">     * 判断指定位置是否合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tells if the argument is the index of a valid position for an</span></span><br><span class="line"><span class="comment">     * iterator or an add operation.</span></span><br><span class="line"><span class="comment">     * 判断这个有效位置的下标在迭代器遍历或插入元素时是否合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an IndexOutOfBoundsException detail message.</span></span><br><span class="line"><span class="comment">     * Of the many possible refactorings of the error handling code,</span></span><br><span class="line"><span class="comment">     * this "outlining" performs best with both server and client VMs.</span></span><br><span class="line"><span class="comment">     * 构造一个异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断指定位置是否合法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isElementIndex(index))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//判断指定位置是否合法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the (non-null) Node at the specified element index.</span></span><br><span class="line"><span class="comment">     * 返回指定下标的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert isElementIndex(index); 先确定是合法的下标</span></span><br><span class="line"><span class="comment">// 比较 index 与 1/2的size 的大小，减少遍历次数</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; x = first;<span class="comment">//从首节点位置开始遍历，下标0处</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) </span><br><span class="line">                x = x.next;<span class="comment">//遍历到index-1，取到index-1节点的next节点</span></span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; x = last; <span class="comment">//从尾部开始遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">                x = x.prev;<span class="comment">//遍历到index+1，取到index+1节点的prev节点</span></span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Search Operations  查询操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the first occurrence of the specified element</span></span><br><span class="line"><span class="comment">     * 返回在链表中首次出现指定元素的位置下标，假如不存在这样的元素，则返回-1</span></span><br><span class="line"><span class="comment">     * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment">     * More formally, returns the lowest index &#123;<span class="doctag">@code</span> i&#125; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element to search for</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the index of the first occurrence of the specified element in</span></span><br><span class="line"><span class="comment">     *         this list, or -1 if this list does not contain the element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>; <span class="comment">//初始下标为0</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">//若没有改元素 则返回-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the last occurrence of the specified element</span></span><br><span class="line"><span class="comment">     * 返回在链表中最后一次出现指定元素的位置下标，假如不存在这样的元素，则返回-1</span></span><br><span class="line"><span class="comment">     * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment">     * More formally, returns the highest index &#123;<span class="doctag">@code</span> i&#125; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element to search for</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the index of the last occurrence of the specified element in</span></span><br><span class="line"><span class="comment">     *         this list, or -1 if this list does not contain the element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = size; <span class="comment">//从尾部开始遍历</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123; <span class="comment">//若 o==null</span></span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">                index--; <span class="comment">//先index-1， 因为index是从size开始的</span></span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//否则就用equals比较相等</span></span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">                index--;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">//若链表里未包含这个元素，则返回-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Queue operations.  队列操作</span></span><br><span class="line">    <span class="comment">// 队列：先进先出，队尾允许插入的一端。队头是允许删除的一端</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieves, but does not remove, the head (first element) of this list.</span></span><br><span class="line"><span class="comment">     * 出队，从首部开始，返回链表的首部节点的元素值 ，但是不会删除这个节点</span></span><br><span class="line"><span class="comment">     * 返回null 若这个链表为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the head of this list, or &#123;<span class="doctag">@code</span> null&#125; if this list is empty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item; <span class="comment">//若f为null返回null，否则返回元素值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieves, but does not remove, the head (first element) of this list.</span></span><br><span class="line"><span class="comment">     * 返回这个链表的首节点的元素值 ，若链表为空 将抛出异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the head of this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">element</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieves and removes the head (first element) of this list.</span></span><br><span class="line"><span class="comment">     * 出队，从首节点开始，返回这个首节点的元素值并删除首节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the head of this list, or &#123;<span class="doctag">@code</span> null&#125; if this list is empty</span></span><br><span class="line"><span class="comment">     * 与peek（）方法类似 ，但是peek不会删除节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);<span class="comment">//返回null或者是删除的节点的元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieves and removes the head (first element) of this list.</span></span><br><span class="line"><span class="comment">     * 出队，删除首节点并返回该节点的元素值</span></span><br><span class="line"><span class="comment">     * 若这个链表为空，则返回null</span></span><br><span class="line"><span class="comment">     * 与 element()方法类似， 空链表都会抛出异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the head of this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds the specified element as the tail (last element) of this list.</span></span><br><span class="line"><span class="comment">     * 入队，在链表尾部插入指定的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Queue#offer&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用add 在尾部插入元素</span></span><br><span class="line">        <span class="keyword">return</span> add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Deque operations 双端队列操作</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts the specified element at the front of this list.</span></span><br><span class="line"><span class="comment">     * 入队， 在这个链表的前端插入指定的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the element to insert</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Deque#offerFirst&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用addFirst方法在链表的前端插入</span></span><br><span class="line">        addFirst(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts the specified element at the end of this list.</span></span><br><span class="line"><span class="comment">     * 入队，在这个链表的尾端插入指点的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the element to insert</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Deque#offerLast&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用addLast方法在链表的尾端插入</span></span><br><span class="line">        addLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieves, but does not remove, the first element of this list,</span></span><br><span class="line"><span class="comment">     * or returns &#123;<span class="doctag">@code</span> null&#125; if this list is empty.</span></span><br><span class="line"><span class="comment">     * 出队，这个操作不会移除节点，返回这个链表首节点的元素值</span></span><br><span class="line"><span class="comment">     * 若链表为空，则返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the first element of this list, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     *         if this list is empty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peekFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;<span class="comment">//返回null或者此节点的元素</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieves, but does not remove, the last element of this list,</span></span><br><span class="line"><span class="comment">     * or returns &#123;<span class="doctag">@code</span> null&#125; if this list is empty.</span></span><br><span class="line"><span class="comment">     * 出队，这个操作不会移除节点，返回这个链表尾节点的元素值</span></span><br><span class="line"><span class="comment">     * 若链表为空，则返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the last element of this list, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     *         if this list is empty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : l.item;<span class="comment">//返回null或者此节点的元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieves and removes the first element of this list,</span></span><br><span class="line"><span class="comment">     * or returns &#123;<span class="doctag">@code</span> null&#125; if this list is empty.</span></span><br><span class="line"><span class="comment">     * 出队，这个操作会移除节点，返回这个链表的首节点的元素并删除这个节点</span></span><br><span class="line"><span class="comment">     * 若链表为空，则返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the first element of this list, or &#123;<span class="doctag">@code</span> null&#125; if</span></span><br><span class="line"><span class="comment">     *     this list is empty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;<span class="comment">//链表的首节点</span></span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);<span class="comment">//不为null调用unlinkFirst(f)方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieves and removes the last element of this list,</span></span><br><span class="line"><span class="comment">     * or returns &#123;<span class="doctag">@code</span> null&#125; if this list is empty.</span></span><br><span class="line"><span class="comment">     * 出队，这个操作会移除节点，返回这个链表的尾节点的元素并删除这个节点</span></span><br><span class="line"><span class="comment">     * 若链表为空，则返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the last element of this list, or &#123;<span class="doctag">@code</span> null&#125; if</span></span><br><span class="line"><span class="comment">     *     this list is empty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;<span class="comment">//链表的尾节点</span></span><br><span class="line">        <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkLast(l);<span class="comment">//不为null调用unlinkLast(l)方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈操作</span></span><br><span class="line"><span class="comment">// 栈的特点：先进后出，出栈入栈都在栈顶，先进的在栈底，后进的在栈顶</span></span><br><span class="line"><span class="comment">// 好比高高的蒸笼一层一层的，放在最下面的蒸笼的包子最后才能拿出来</span></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Pushes an element onto the stack represented by this list.  In other </span></span><br><span class="line"><span class="comment">     * words, inserts the element at the front of this list.</span></span><br><span class="line"><span class="comment">     * 入栈，换句话来说，就是在链表的前（首）端插入指定的元素</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #addFirst&#125;.</span></span><br><span class="line"><span class="comment">     * 这个方法跟addFirst方法是等价的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the element to push</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//直接调用了addFirst方法</span></span><br><span class="line">        addFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Pops an element from the stack represented by this list.  In other</span></span><br><span class="line"><span class="comment">     * words, removes and returns the first element of this list.</span></span><br><span class="line"><span class="comment">     * 出栈，就是移除并返回这个链表的首节点</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #removeFirst()&#125;.</span></span><br><span class="line"><span class="comment">     * 这个方法跟removeFirst（）方法是等价的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element at the front of this list (which is the top</span></span><br><span class="line"><span class="comment">     *         of the stack represented by this list)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment">     * 若链表为空，则抛出异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//直接调用了removeFirst（）方法</span></span><br><span class="line">        <span class="keyword">return</span> removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the first occurrence of the specified element in this</span></span><br><span class="line"><span class="comment">     * list (when traversing the list from head to tail).  If the list</span></span><br><span class="line"><span class="comment">     * does not contain the element, it is unchanged.</span></span><br><span class="line"><span class="comment">     * 移除指定元素在链表中第一次出现的节点，若链表中不存在这个元素，则不改变</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the list contained the specified element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeFirstOccurrence</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用remove方法</span></span><br><span class="line">        <span class="keyword">return</span> remove(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the last occurrence of the specified element in this</span></span><br><span class="line"><span class="comment">     * list (when traversing the list from head to tail).  If the list</span></span><br><span class="line"><span class="comment">     * does not contain the element, it is unchanged.</span></span><br><span class="line"><span class="comment">     * 移除指定元素在链表中最后一次出现的节点，若链表中不存在这个元素，则不改变</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the list contained the specified element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeLastOccurrence</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123; <span class="comment">//若指定元素==null</span></span><br><span class="line">        <span class="comment">//从尾部节点开始向前遍历</span></span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//指定元素不为null</span></span><br><span class="line">        <span class="comment">//从尾部节点开始向前遍历</span></span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//若链表中不包含这个元素，就返回false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a list-iterator of the elements in this list (in proper</span></span><br><span class="line"><span class="comment">     * sequence), starting at the specified position in the list.</span></span><br><span class="line"><span class="comment">     * Obeys the general contract of &#123;<span class="doctag">@code</span> List.listIterator(int)&#125;.&lt;p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The list-iterator is &lt;i&gt;fail-fast&lt;/i&gt;: if the list is structurally</span></span><br><span class="line"><span class="comment">     * modified at any time after the Iterator is created, in any way except</span></span><br><span class="line"><span class="comment">     * through the list-iterator's own &#123;<span class="doctag">@code</span> remove&#125; or &#123;<span class="doctag">@code</span> add&#125;</span></span><br><span class="line"><span class="comment">     * methods, the list-iterator will throw a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> ConcurrentModificationException&#125;.  Thus, in the face of</span></span><br><span class="line"><span class="comment">     * concurrent modification, the iterator fails quickly and cleanly, rather</span></span><br><span class="line"><span class="comment">     * than risking arbitrary, non-deterministic behavior at an undetermined</span></span><br><span class="line"><span class="comment">     * time in the future.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index of the first element to be returned from the</span></span><br><span class="line"><span class="comment">     *              list-iterator (by a call to &#123;<span class="doctag">@code</span> next&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a ListIterator of the elements in this list (in proper</span></span><br><span class="line"><span class="comment">     *         sequence), starting at the specified position in the list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> List#listIterator(int)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index); <span class="comment">//检查index的合法性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index); <span class="comment">//返回一个ListItr对象，默认从0开始</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;E&gt; lastReturned;<span class="comment">//（本次迭代）最近一次遍历到的节点</span></span><br><span class="line">        <span class="keyword">private</span> Node&lt;E&gt; next;<span class="comment">//本次的下一次迭代的节点会作为下一次的本次迭代节点</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;<span class="comment">//游标，下一次调用方法返回节点的下标</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;<span class="comment">//结构改变的次数，防止并发操作</span></span><br><span class="line"></span><br><span class="line">        ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">            <span class="comment">// assert isPositionIndex(index);</span></span><br><span class="line">            <span class="comment">//index位置的节点作为迭代器遍历的第一个节点</span></span><br><span class="line">            next = (index == size) ? <span class="keyword">null</span> : node(index);</span><br><span class="line">            nextIndex = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//比较nextIndex与size的大小</span></span><br><span class="line">            <span class="keyword">return</span> nextIndex &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();<span class="comment">//检查modCount有没有改变过，若有抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="comment">//判断有没有超过size</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">            lastReturned = next; <span class="comment">//next的引用给lastReturned，本次迭代将要返回的节点</span></span><br><span class="line">            next = next.next;<span class="comment">//下一次迭代将返回的节点，</span></span><br><span class="line">            nextIndex++; <span class="comment">//迭代的索引+1 下次返回的节点的下标位置</span></span><br><span class="line">            <span class="keyword">return</span> lastReturned.item; <span class="comment">//返回本次迭代返回的节点的元素</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否前面还有节点</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification(); <span class="comment">//检查modCount的合法性</span></span><br><span class="line">            <span class="keyword">if</span> (!hasPrevious()) <span class="comment">//前面没有节点了</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line"><span class="comment">//本次返回跟下次返回的节点是一样的，</span></span><br><span class="line"><span class="comment">//每次next或previous方法返回的节点是根据next属性确定的</span></span><br><span class="line">            lastReturned = next = (next == <span class="keyword">null</span>) ? last : next.prev;</span><br><span class="line">            nextIndex--;</span><br><span class="line">            <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex; <span class="comment">//返回下一次的下标位置</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex - <span class="number">1</span>;<span class="comment">//返回本次下标位置</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ListItr迭代器的移除方法，在迭代过程中，是不允许使用LinkedList</span></span><br><span class="line"><span class="comment">//的移除操作的，会抛出并发异常，用迭代器的remove方法可以</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification(); <span class="comment">//检查modCount合法性</span></span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>) <span class="comment">// 本次迭代返回的节点</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line"><span class="comment">//本次迭代返回节点的next节点</span></span><br><span class="line">            Node&lt;E&gt; lastNext = lastReturned.next;</span><br><span class="line">            unlink(lastReturned); <span class="comment">//移除本次迭代的节点</span></span><br><span class="line">            <span class="keyword">if</span> (next == lastReturned) </span><br><span class="line">            <span class="comment">//这里previous方法里next是==lastReturn的</span></span><br><span class="line">                next = lastNext;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextIndex--; <span class="comment">//previous方法里减过了</span></span><br><span class="line">            lastReturned = <span class="keyword">null</span>; <span class="comment">//设置本次迭代的节点为null，防止多次remove</span></span><br><span class="line">            expectedModCount++; <span class="comment">//跟modCount保持同步</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过迭代设置值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line">            lastReturned.item = e; <span class="comment">//本次迭代的元素赋值为e</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//通过迭代器添加元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            checkForComodification();<span class="comment">//日常检查合法性</span></span><br><span class="line">            lastReturned = <span class="keyword">null</span>;<span class="comment">//本次迭代节点设为null</span></span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) <span class="comment">//下一次迭代为null，即在尾部</span></span><br><span class="line">                linkLast(e); <span class="comment">//尾部插入元素</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                linkBefore(e, next); <span class="comment">//在下次迭代的节点前，添加一个节点，值为e</span></span><br><span class="line">            nextIndex++;  <span class="comment">//nextIndex+1，next值不变，因为next前加了一个节点</span></span><br><span class="line">            expectedModCount++; <span class="comment">//日常跟modCount保持同步</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器的循环遍历</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(action);</span><br><span class="line">            <span class="keyword">while</span> (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) &#123;</span><br><span class="line">                action.accept(next.item); <span class="comment">//本次的下一次迭代的节点会作为下一次的本次迭代节点</span></span><br><span class="line">                lastReturned = next;<span class="comment">// 本次迭代的节点</span></span><br><span class="line">                next = next.next;<span class="comment">//下一次迭代的节点</span></span><br><span class="line">                nextIndex++;<span class="comment">//迭代次数+1，或者说迭代的下标+1</span></span><br><span class="line">            &#125;</span><br><span class="line">            checkForComodification(); <span class="comment">//foreach完检查一下modCount</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查modCount的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     * 翻译了一下叫  下行迭代器   - =!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DescendingIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adapter to provide descending iterators via ListItr.previous</span></span><br><span class="line"><span class="comment">     * 通过ListItr previous方法来实现下行迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//new一个迭代器， 从链表的尾部开始遍历</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ListItr itr = <span class="keyword">new</span> ListItr(size());</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> itr.hasPrevious();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> itr.previous();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            itr.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> LinkedList&lt;E&gt; <span class="title">superClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (LinkedList&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a shallow copy of this &#123;<span class="doctag">@code</span> LinkedList&#125;. (The elements</span></span><br><span class="line"><span class="comment">     * themselves are not cloned.)</span></span><br><span class="line"><span class="comment">     * 返回一个浅拷贝 其中的元素不会拷贝，所以我们来手动添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a shallow copy of this &#123;<span class="doctag">@code</span> LinkedList&#125; instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;E&gt; clone = superClone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Put clone into "virgin" state</span></span><br><span class="line">        clone.first = clone.last = <span class="keyword">null</span>;</span><br><span class="line">        clone.size = <span class="number">0</span>;</span><br><span class="line">        clone.modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize clone with our elements 初始化copy对象</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            clone.add(x.item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array containing all of the elements in this list</span></span><br><span class="line"><span class="comment">     * in proper sequence (from first to last element).</span></span><br><span class="line"><span class="comment">     * 返回一个包含这个链表里的所有元素的数组，元素顺序从头到尾依次</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned array will be "safe" in that no references to it are</span></span><br><span class="line"><span class="comment">     * maintained by this list.  (In other words, this method must allocate</span></span><br><span class="line"><span class="comment">     * a new array).  The caller is thus free to modify the returned array.</span></span><br><span class="line"><span class="comment">     *这个方法返回的数组是安全的，因为在链表里没有引用它，所以这个方法需要分配一个新的数组空间，调用方可以自由修改此方法返回的数组。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method acts as bridge between array-based and collection-based</span></span><br><span class="line"><span class="comment">     * APIs.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array containing all of the elements in this list</span></span><br><span class="line"><span class="comment">     *         in proper sequence</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">    <span class="comment">//new一个Object数组，长度为size</span></span><br><span class="line">        Object[] result = <span class="keyword">new</span> Object[size];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//从首部开始遍历链表，把元素依次添加进数组</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            result[i++] = x.item;</span><br><span class="line">        <span class="keyword">return</span> result; <span class="comment">//返回这个数组</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array containing all of the elements in this list in</span></span><br><span class="line"><span class="comment">     * proper sequence (from first to last element); the runtime type of</span></span><br><span class="line"><span class="comment">     * the returned array is that of the specified array.  If the list fits</span></span><br><span class="line"><span class="comment">     * in the specified array, it is returned therein.  Otherwise, a new</span></span><br><span class="line"><span class="comment">     * array is allocated with the runtime type of the specified array and</span></span><br><span class="line"><span class="comment">     * the size of this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;If the list fits in the specified array with room to spare (i.e.,</span></span><br><span class="line"><span class="comment">     * the array has more elements than the list), the element in the array</span></span><br><span class="line"><span class="comment">     * immediately following the end of the list is set to &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment">     * (This is useful in determining the length of the list &lt;i&gt;only&lt;/i&gt; if</span></span><br><span class="line"><span class="comment">     * the caller knows that the list does not contain any null elements.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Like the &#123;<span class="doctag">@link</span> #toArray()&#125; method, this method acts as bridge between</span></span><br><span class="line"><span class="comment">     * array-based and collection-based APIs.  Further, this method allows</span></span><br><span class="line"><span class="comment">     * precise control over the runtime type of the output array, and may,</span></span><br><span class="line"><span class="comment">     * under certain circumstances, be used to save allocation costs.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Suppose &#123;<span class="doctag">@code</span> x&#125; is a list known to contain only strings.</span></span><br><span class="line"><span class="comment">     * The following code can be used to dump the list into a newly</span></span><br><span class="line"><span class="comment">     * allocated array of &#123;<span class="doctag">@code</span> String&#125;:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *     String[] y = x.toArray(new String[0]);&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Note that &#123;<span class="doctag">@code</span> toArray(new Object[0])&#125; is identical in function to</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> toArray()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the array into which the elements of the list are to</span></span><br><span class="line"><span class="comment">     *          be stored, if it is big enough; otherwise, a new array of the</span></span><br><span class="line"><span class="comment">     *          same runtime type is allocated for this purpose.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array containing the elements of the list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ArrayStoreException if the runtime type of the specified array</span></span><br><span class="line"><span class="comment">     *         is not a supertype of the runtime type of every element in</span></span><br><span class="line"><span class="comment">     *         this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified array is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">//此方法返回一个指定类型的数组，</span></span><br><span class="line">     <span class="comment">//假如你知道此链表里面都是Strings，那么可以String[] y = x.toArray(new String[0]);</span></span><br><span class="line">     <span class="comment">//toArray(Object[] a)等价于 toArray（）</span></span><br><span class="line">     <span class="comment">//若给定的数组长度小于size，那么将会new一个新的类型跟a相同size大小的数组</span></span><br><span class="line">     <span class="comment">//注意可能抛出的异常    </span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            a = (T[])java.lang.reflect.Array.newInstance(</span><br><span class="line">                                a.getClass().getComponentType(), size);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        Object[] result = a;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            result[i++] = x.item;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现了序列化接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">876323262645176354L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Saves the state of this &#123;<span class="doctag">@code</span> LinkedList&#125; instance to a stream</span></span><br><span class="line"><span class="comment">     * (that is, serializes it).</span></span><br><span class="line"><span class="comment">     * 序列化一个LinkedList实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span> The size of the list (the number of elements it</span></span><br><span class="line"><span class="comment">     *             contains) is emitted (int), followed by all of its</span></span><br><span class="line"><span class="comment">     *             elements (each an Object) in the proper order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            s.writeObject(x.item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitutes this &#123;<span class="doctag">@code</span> LinkedList&#125; instance from a stream</span></span><br><span class="line"><span class="comment">     * (that is, deserializes it).</span></span><br><span class="line"><span class="comment">     * 反序列化LinkedList实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size</span></span><br><span class="line">        <span class="keyword">int</span> size = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            linkLast((E)s.readObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &lt;em&gt;&lt;a href="Spliterator.html#binding"&gt;late-binding&lt;/a&gt;&lt;/em&gt;</span></span><br><span class="line"><span class="comment">     * and &lt;em&gt;fail-fast&lt;/em&gt; &#123;<span class="doctag">@link</span> Spliterator&#125; over the elements in this</span></span><br><span class="line"><span class="comment">     * list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The &#123;<span class="doctag">@code</span> Spliterator&#125; reports &#123;<span class="doctag">@link</span> Spliterator#SIZED&#125; and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Spliterator#ORDERED&#125;.  Overriding implementations should document</span></span><br><span class="line"><span class="comment">     * the reporting of additional characteristic values.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implNote</span></span></span><br><span class="line"><span class="comment">     * The &#123;<span class="doctag">@code</span> Spliterator&#125; additionally reports &#123;<span class="doctag">@link</span> Spliterator#SUBSIZED&#125;</span></span><br><span class="line"><span class="comment">     * and implements &#123;<span class="doctag">@code</span> trySplit&#125; to permit limited parallelism..</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> Spliterator&#125; over the elements in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LLSpliterator&lt;E&gt;(<span class="keyword">this</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** A customized variant of Spliterators.IteratorSpliterator */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LLSpliterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BATCH_UNIT = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;  <span class="comment">// batch array size increment</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_BATCH = <span class="number">1</span> &lt;&lt; <span class="number">25</span>;  <span class="comment">// max batch array size;</span></span><br><span class="line">        <span class="keyword">final</span> LinkedList&lt;E&gt; list; <span class="comment">// null OK unless traversed</span></span><br><span class="line">        Node&lt;E&gt; current;      <span class="comment">// current node; null until initialized</span></span><br><span class="line">        <span class="keyword">int</span> est;              <span class="comment">// size estimate; -1 until first needed</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount; <span class="comment">// initialized when est set</span></span><br><span class="line">        <span class="keyword">int</span> batch;            <span class="comment">// batch size for splits</span></span><br><span class="line"></span><br><span class="line">        LLSpliterator(LinkedList&lt;E&gt; list, <span class="keyword">int</span> est, <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.list = list;</span><br><span class="line">            <span class="keyword">this</span>.est = est;</span><br><span class="line">            <span class="keyword">this</span>.expectedModCount = expectedModCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getEst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> s; <span class="comment">// force initialization</span></span><br><span class="line">            <span class="keyword">final</span> LinkedList&lt;E&gt; lst;</span><br><span class="line">            <span class="keyword">if</span> ((s = est) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((lst = list) == <span class="keyword">null</span>)</span><br><span class="line">                    s = est = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    expectedModCount = lst.modCount;</span><br><span class="line">                    current = lst.first;</span><br><span class="line">                    s = est = lst.size;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (<span class="keyword">long</span>) getEst(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;E&gt; p;</span><br><span class="line">            <span class="keyword">int</span> s = getEst();</span><br><span class="line">            <span class="keyword">if</span> (s &gt; <span class="number">1</span> &amp;&amp; (p = current) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> n = batch + BATCH_UNIT;</span><br><span class="line">                <span class="keyword">if</span> (n &gt; s)</span><br><span class="line">                    n = s;</span><br><span class="line">                <span class="keyword">if</span> (n &gt; MAX_BATCH)</span><br><span class="line">                    n = MAX_BATCH;</span><br><span class="line">                Object[] a = <span class="keyword">new</span> Object[n];</span><br><span class="line">                <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123; a[j++] = p.item; &#125; <span class="keyword">while</span> ((p = p.next) != <span class="keyword">null</span> &amp;&amp; j &lt; n);</span><br><span class="line">                current = p;</span><br><span class="line">                batch = j;</span><br><span class="line">                est = s - j;</span><br><span class="line">                <span class="keyword">return</span> Spliterators.spliterator(a, <span class="number">0</span>, j, Spliterator.ORDERED);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            Node&lt;E&gt; p; <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> ((n = getEst()) &gt; <span class="number">0</span> &amp;&amp; (p = current) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                current = <span class="keyword">null</span>;</span><br><span class="line">                est = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    E e = p.item;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    action.accept(e);</span><br><span class="line">                &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; --n &gt; <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (list.modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            Node&lt;E&gt; p;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (getEst() &gt; <span class="number">0</span> &amp;&amp; (p = current) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                --est;</span><br><span class="line">                E e = p.item;</span><br><span class="line">                current = p.next;</span><br><span class="line">                action.accept(e);</span><br><span class="line">                <span class="keyword">if</span> (list.modCount != expectedModCount)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;LinkedList&quot;&gt;&lt;a href=&quot;#LinkedList&quot; class=&quot;headerlink&quot; title=&quot;LinkedList&quot;&gt;&lt;/a&gt;LinkedList&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;LinkedList&lt;/strong&gt;是List和Deque接口的双向链表的实现，实现了List接口的所有可选操作，它允许存储包括null值所有元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LinkedList&lt;/strong&gt;不是同步的。如果多个线程并发访问一个链表，其中至少一个线程改变了链表的结构，那么它必须保持外部同步。（结构上的修改是指添加或删除一个或多个元素的任何操作，单单的只是设置值，结构不会发生变化。）这通常是通过在自然封装列表的某个对象上同步完成的。&lt;br&gt;如果没有这样的对象，我们可以通过使用&lt;code&gt;Collections.synchronizedList&lt;/code&gt;方法，&lt;br&gt;如：&lt;code&gt;List list = Collections.synchronizedList(new LinkedList(...));&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;LinkedList特点&quot;&gt;&lt;a href=&quot;#LinkedList特点&quot; class=&quot;headerlink&quot; title=&quot;LinkedList特点&quot;&gt;&lt;/a&gt;LinkedList特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;LinkedList是通过节点彼此之间的联系来实现链表的，每一个节点都包含前一个节点的引用，后一个节点的引用和节点存储的值。LinkedList的节点在内存空间上不是连续的&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;当一个新节点插入时，只需要修改其中保持先后关系的节点的引用即可，当删除记录时也一样，所以LinkedList插入删除的速度非常快;但是读取时，LinkedList.get(i)需要遍历链表，故随机访问的速度慢。&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://ash1daMANA.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ash1daMANA.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架笔记-ArrayList</title>
    <link href="http://ash1daMANA.github.io/2018/01/15/jdknotes-01/"/>
    <id>http://ash1daMANA.github.io/2018/01/15/jdknotes-01/</id>
    <published>2018-01-15T15:04:33.180Z</published>
    <updated>2018-01-15T15:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ArrayList解析-基于jdk1-8"><a href="#ArrayList解析-基于jdk1-8" class="headerlink" title="ArrayList解析-基于jdk1.8"></a><strong>ArrayList解析-基于jdk1.8</strong></h3><ul><li><strong>ArrayList默认的初始大小为10</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Default initial capacity.</span><br><span class="line"> */</span><br><span class="line">private static final int DEFAULT_CAPACITY = 10;</span><br></pre></td></tr></table></figure><ul><li><strong>ArrayList内部维护的数组</strong></li></ul><p><code>transient Object[] elementData;</code></p><blockquote><p>ArrayList存放数据的数组<br>注：transient关键字，默认情况下,对象的所有成员变量都将被持久化.在某些情况下,如果你想避免持久化对象的一些成员变量,你可以使用transient关键字来标记他们，换句话说就是transient标记的成员变量不参与序列化过程。</p></blockquote><a id="more"></a><ul><li><strong>size</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The size of the ArrayList (the number of elements it contains).</span><br><span class="line"> *</span><br><span class="line"> * @serial</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">private int size;</span><br></pre></td></tr></table></figure><blockquote><p>可以从注释上看得很明白，size等于包含的元素数量， size不等于elementData.length;</p></blockquote><ul><li><strong>构造方法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public ArrayList(int initialCapacity) &#123;</span><br><span class="line">    if (initialCapacity &gt; 0) &#123;</span><br><span class="line">        //new一个该大小的Object数组赋值给elementData</span><br><span class="line">        this.elementData = new Object[initialCapacity];</span><br><span class="line">    &#125; else if (initialCapacity == 0) &#123;</span><br><span class="line">        //将空数组赋值给elementData</span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>构造一个自定义初始容量的list。<br>@param 列表的初始容量<br>@throws 初始容量为负值，则抛出一个IllegalArgumentException</p></blockquote><ul><li><strong>构造方法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Constructs an empty list with an initial capacity of ten.</span><br><span class="line"> */</span><br><span class="line">public ArrayList() &#123;</span><br><span class="line">    //将空数组赋值给elementData</span><br><span class="line">    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>构造一个初始容量为空的list。<br>注：代码上的注释：用无参构造一个列表时，这个列表的elementData为空，在第一次调用add()方法时，将给列表的容量赋为初始值10</p></blockquote><ul><li><strong>构造方法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public ArrayList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    if ((size = elementData.length) != 0) &#123;</span><br><span class="line">        // c.toArray might (incorrectly) not return Object[] (see 6260652) 这里c.toArray可能不会返回Object数组</span><br><span class="line">        if (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // replace with empty array.  使用空数组替代，即把空数组赋值为elementData</span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>构造一个list，把参数的集合通过toArray()方法转为Object数组赋值给elementData<br>@param Collection集合</p></blockquote><ul><li><strong>缩小容量</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void trimToSize() &#123;</span><br><span class="line">    //每修改一次列表的结构 modCount都会改变</span><br><span class="line">    modCount++;</span><br><span class="line">    if (size &lt; elementData.length) &#123;</span><br><span class="line">        elementData = (size == 0)</span><br><span class="line">          ? EMPTY_ELEMENTDATA</span><br><span class="line">          : Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据size的大小返回一个新的数组，size=0则返回一个空的数组，否则返回一个size长度、内容与原数组相同的数组。<br>注：因为容量常常会大于实际元素的数量。内存紧张时，可以调用该方法删除预留的位置，调整容量为元素实际数量。如果确定不会再有元素添加进来时也可以调用该方法来节约空间</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void ensureCapacity(int minCapacity) &#123;</span><br><span class="line">    // 预设的容量根据elementData数组是否为空取0或10</span><br><span class="line">    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">        // any size if not default element table 当不是默认空数组的任何大小</span><br><span class="line">        ? 0</span><br><span class="line">        // larger than default for default empty table. It&apos;s already</span><br><span class="line">        // supposed to be at default size.</span><br><span class="line">        : DEFAULT_CAPACITY;</span><br><span class="line">    //如果给定的参数（需要的最小容量）大于取得的预设容量，则调用下面的方法</span><br><span class="line">    if (minCapacity &gt; minExpand) &#123;</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据原数组的长度来确定要不要继续扩容<br>@param 需要的容量</p></blockquote><ul><li><strong>确定扩充数组的大小</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">     if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">         minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ensureExplicitCapacity(minCapacity);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果当前list的elementData数组是个空数组，取DEFAULT_CAPACITY与方法参数的最大值，然后调用ensureExplicitCapacity方法</p></blockquote><ul><li>紧接着</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    //每修改一次列表结构，modCount都会改变</span><br><span class="line">    // 数据结构发生改变，和fail-fast机制有关，在使用迭代器过程中，只能通过迭代器的方法（比如迭代器中add，remove等），修改List的数据结构，</span><br><span class="line">    // 如果使用List的方法（比如List中的add，remove等），修改List的数据结构，会抛出ConcurrentModificationException</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    //判断当前elementData的容量是否满足预期需要的容量</span><br><span class="line">    if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        //调用grow方法</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>判断传进来的方法的参数minCapacity与elementData数组当前长度的大小，如果条件成立，即minCapacity &gt; elementData.length，说明当前的容量确实不够用，需要扩容。 </p></blockquote><ul><li>数组的最大容量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The maximum size of array to allocate.</span><br><span class="line"> * Some VMs reserve some header words in an array.</span><br><span class="line"> * Attempts to allocate larger arrays may result in</span><br><span class="line"> * OutOfMemoryError: Requested array size exceeds VM limit</span><br><span class="line"> */</span><br><span class="line"> //因为vm的限制 数组的最大容量为</span><br><span class="line">private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span><br></pre></td></tr></table></figure><ul><li>紧接着</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    //原容量</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    //新容量 值为原容量的1.5倍</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    //如果预设的新容量小于需要的容量，则把需要的容量赋值给新容量</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    //如果新容量大于数组的最大容量</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    // minCapacity is usually close to size, so this is a win:</span><br><span class="line">    //调用copyOf</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以从源码明显的看到，newCapacity的值为oldCapacity+(oldCapacity &gt;&gt;1）（右移1位即除以2）即等于1.5倍的oldCapacity。然后比较newCapacity与minCapacity的大小，然后根据Arrays的copyOf方法生成一个新的数组，内容与原数组保持一致，长度为newCapacity。</p></blockquote><ul><li><strong>size</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public int size() &#123;</span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接返回size，即列表的大小，列表大小不是elementData数组的长度</p></blockquote><ul><li><strong>isEmpty</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">    return size == 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据size与0比较的布尔值来判断是否为空。举个例子 new ArrayList(10); ,当没有给list add值时，这个时候size=0,尽管elementData.length=10。</p></blockquote><ul><li><strong>contains</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public boolean contains(Object o) &#123;</span><br><span class="line">    return indexOf(o) &gt;= 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>判断列表中是否包含参数对象<br>下面来看 indexOf()方法</p></blockquote><ul><li><strong>indexOf()</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public int indexOf(Object o) &#123;</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (int i = 0; i &lt; size; i++)</span><br><span class="line">            if (elementData[i]==null)</span><br><span class="line">                return i;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int i = 0; i &lt; size; i++)</span><br><span class="line">            if (o.equals(elementData[i]))</span><br><span class="line">                return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据参数值是否为null，来遍历数组，找到第一个相同的值即返回当前的下标，未找到就返回-1。<br>时间复杂度为O(n)</p></blockquote><ul><li><strong>lastIndexOf</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public int lastIndexOf(Object o) &#123;</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (int i = size-1; i &gt;= 0; i--)</span><br><span class="line">            if (elementData[i]==null)</span><br><span class="line">                return i;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int i = size-1; i &gt;= 0; i--)</span><br><span class="line">            if (o.equals(elementData[i]))</span><br><span class="line">                return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回一个值在数组最后一次出现的位置，会根据是否为null使用不同方式判断。不存在就返回-1。时间复杂度为O(N)</p></blockquote><ul><li><strong>clone</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public Object clone() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //调用Object的clone方法</span><br><span class="line">        ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) super.clone();</span><br><span class="line">        //copy原ArrayList的elementData的数据内容给拷贝副本，size的大小</span><br><span class="line">        v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">        v.modCount = 0;</span><br><span class="line">        return v;</span><br><span class="line">    &#125; catch (CloneNotSupportedException e) &#123;</span><br><span class="line">        // this shouldn&apos;t happen, since we are Cloneable</span><br><span class="line">        throw new InternalError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>clone()方法，调用父类的clone()方法,</p></blockquote><ul><li><strong>toArray</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public Object[] toArray() &#123;</span><br><span class="line">    //注意length为size</span><br><span class="line">    return Arrays.copyOf(elementData, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>toArray</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">     if (a.length &lt; size)</span><br><span class="line">         // Make a new array of a&apos;s runtime type, but my contents:</span><br><span class="line">         return (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">     System.arraycopy(elementData, 0, a, 0, size);</span><br><span class="line">     if (a.length &gt; size)</span><br><span class="line">         a[size] = null;</span><br><span class="line">     return a;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>get</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public E get(int index) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    return elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>get()方法，根据给出的下标去查找值，在这之前调用rangeCheck()方法来确保index是合法的。如是否是负值</p></blockquote><ul><li><strong>set</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public E set(int index, E element) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    return oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>set()方法，设置指定位置为一个新值，并返回之前的值，会检查这个位置是否超出数组长度</p></blockquote><ul><li><strong>确保下标合法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private void rangeCheck(int index) &#123;</span><br><span class="line">     if (index &gt;= size)</span><br><span class="line">         throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * A version of rangeCheck used by add and addAll.</span><br><span class="line">  */</span><br><span class="line"> private void rangeCheckForAdd(int index) &#123;</span><br><span class="line">     if (index &gt; size || index &lt; 0)</span><br><span class="line">         throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">     private String outOfBoundsMsg(int index) &#123;</span><br><span class="line">     return &quot;Index: &quot;+index+&quot;, Size: &quot;+size;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>add</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>add()方法是在数组的末尾添加新的元素,在这之前调用ensureCapacityInternal()方法确认数组的容量，然后elementData(size)=e ;size++;</p></blockquote><ul><li><strong>add</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + 1,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>扩容之后，把elementData数组index下标开始的元素内容依次往后移，然后在index下标处插入新的元素。</p></blockquote><ul><li><strong>remove</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public E remove(int index) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    //移动size-index-1个数据  -1就是减去当前remove的一个数</span><br><span class="line">    int numMoved = size - index - 1;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = null; // clear to let GC do its work</span><br><span class="line"></span><br><span class="line">    return oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如删除的元素处于中间位置，那么把从index+1开始的元素内容依次往前移，这样的话index+1就覆盖了index位置的内容，然后末尾就多出来一个位置，接着–size即size-1 ，然后把[size-1]位置赋值为null，因为原数组最后一个数据的位置是[size-1]</p></blockquote><ul><li><strong>remove</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (int index = 0; index &lt; size; index++)</span><br><span class="line">            if (elementData[index] == null) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int index = 0; index &lt; size; index++)</span><br><span class="line">            if (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>remove()方法，通过遍历数组来查找是否有参数对象，如有，通过当前的下标进行remove，方法结构类似indexOf方法。看一下fastRemove()方法。</p></blockquote><ul><li><strong>fastRemove</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private void fastRemove(int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    int numMoved = size - index - 1;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = null; // clear to let GC do its work</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>跟上面的remove()方法一样</p></blockquote><ul><li><strong>clear</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void clear() &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    // clear to let GC do its work</span><br><span class="line">    for (int i = 0; i &lt; size; i++)</span><br><span class="line">        elementData[i] = null;</span><br><span class="line">    //清空之后size=0</span><br><span class="line">    size = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>遍历数组，每个下标位置赋值为null, 清空数组,方便垃圾回收</p></blockquote><ul><li><strong>addAll</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    //参数集合转换为Object数组</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    //获取Object数组的长度</span><br><span class="line">    int numNew = a.length;</span><br><span class="line">    //在把Object数组中的元素添加到elementData数组前，确保容量满足</span><br><span class="line">    ensureCapacityInternal(size + numNew);  // Increments modCount</span><br><span class="line">    //从a数组中的0下标位置开始复制numNew个数据到elementData，elementData从下标size位置开始</span><br><span class="line">    System.arraycopy(a, 0, elementData, size, numNew);</span><br><span class="line">    //size=size+numNew</span><br><span class="line">    size += numNew;</span><br><span class="line">    return numNew != 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //在index下标处为开始位置</span><br><span class="line">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    //确保下标合法</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    int numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  // Increments modCount</span><br><span class="line"></span><br><span class="line">    int numMoved = size - index;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">    System.arraycopy(a, 0, elementData, index, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    return numNew != 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>removeRange</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//删除指定范围元素，参数为起始位置和结束位置</span><br><span class="line">protected void removeRange(int fromIndex, int toIndex) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    //要移动的元素的个数</span><br><span class="line">    int numMoved = size - toIndex;</span><br><span class="line">    //从结束位置开始的元素依次往前移到开始的位置</span><br><span class="line">    System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                     numMoved);</span><br><span class="line"></span><br><span class="line">    // clear to let GC do its work 清空便于垃圾回收器收集</span><br><span class="line">    //</span><br><span class="line">    int newSize = size - (toIndex-fromIndex);</span><br><span class="line">    for (int i = newSize; i &lt; size; i++) &#123;</span><br><span class="line">        elementData[i] = null;</span><br><span class="line">    &#125;</span><br><span class="line">    size = newSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从elementData数组中移除一组数据，下标从fromidex到toIndex。然后把toIndex之后的数据移到fromIndex开始的部位进行覆盖，得到一个新的size，新size之后的数据清空。最后newSize赋值给size。</p></blockquote><ul><li><strong>batchRemove</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">  //@param c  包含要从此列表中移除的元素的集合</span><br><span class="line">public boolean removeAll(Collection&lt;?&gt; c) &#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    //调用方法去除c中的元素</span><br><span class="line">    return batchRemove(c, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public boolean retainAll(Collection&lt;?&gt; c) &#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    //调用方法保留c中的元素</span><br><span class="line">    return batchRemove(c, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据参数compment可分为两种</span><br><span class="line"> * 1.compment =false</span><br><span class="line"> * 遍历elementData数组</span><br><span class="line"> * if(c.contains(elementData[r]) == false) 当参数集合中不包含此元素时</span><br><span class="line"> * 给elementData数组从下标0开始的位置开始赋值（覆盖原值）每覆盖一次后 w+1</span><br><span class="line"> * 然后循环遍历结束之后   r的值变为原size 此时w相当于新的size</span><br><span class="line"> * 这里还考虑到c.contains()方法会抛出异常，正常情况 r=size</span><br><span class="line"> * 如果r！=size  r下标之前的元素已经全部遍历过，并且假如c.contains=false</span><br><span class="line"> * 会重新给elementData数组从0位置开始赋值，也就是原r下标位置之前的元素经过处理</span><br><span class="line"> * 后剩了w个元素，然后通过System.arraycopy方法把r之后的元素从w位置开始拼接。然后w=w+size-r ，w赋值为新的size大小</span><br><span class="line"> * 如果r==size 那么就是循环遍历正常 没有发生异常</span><br><span class="line"> * 接下来假如 w！=size 即 elementData数组与参数集合有相同的元素，重复的元素去除后会小于size</span><br><span class="line"> * 此时w就是经过处理去除交集元素后的size（不考虑发生异常后r位置之后的元素是否与参数集合有交集）</span><br><span class="line"> * 把w之后到size位置的内存空间清空，赋为null 便于垃圾回收 size=w</span><br><span class="line"> *</span><br><span class="line"> *2.complement为true时，逻辑相似 elementData数组最后是交集部分</span><br><span class="line"> */</span><br><span class="line">private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) &#123;</span><br><span class="line">    final Object[] elementData = this.elementData;</span><br><span class="line">    int r = 0, w = 0;</span><br><span class="line">    boolean modified = false;</span><br><span class="line">    try &#123;</span><br><span class="line">        for (; r &lt; size; r++)</span><br><span class="line">            if (c.contains(elementData[r]) == complement)</span><br><span class="line">                elementData[w++] = elementData[r];</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // Preserve behavioral compatibility with AbstractCollection,</span><br><span class="line">        // even if c.contains() throws.</span><br><span class="line">        if (r != size) &#123;</span><br><span class="line">            System.arraycopy(elementData, r,</span><br><span class="line">                             elementData, w,</span><br><span class="line">                             size - r);</span><br><span class="line">            w += size - r;</span><br><span class="line">        &#125;</span><br><span class="line">        if (w != size) &#123;</span><br><span class="line">            // clear to let GC do its work</span><br><span class="line">            for (int i = w; i &lt; size; i++)</span><br><span class="line">                elementData[i] = null;</span><br><span class="line">            modCount += size - w;</span><br><span class="line">            size = w;</span><br><span class="line">            modified = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>这里补充一下System.arraycopy</strong></p><blockquote><p>arraycopy(Object src,int srcPos,Object dest, int destPos,int length);<br>src :源数组<br>srcPost:开始位置<br>dest:目标数组<br>destPos:开始位置<br>length:复制的长度<br><strong>改变的是目标数组的内容</strong></p></blockquote></li><li><p><strong>序列化反序列化</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span><br><span class="line">    * is, serialize it).</span><br><span class="line">    *</span><br><span class="line">    * @serialData The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span><br><span class="line">    *             instance is emitted (int), followed by all of its elements</span><br><span class="line">    *             (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span><br><span class="line">    */</span><br><span class="line">   private void writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">       throws java.io.IOException&#123;</span><br><span class="line">       // Write out element count, and any hidden stuff</span><br><span class="line">       int expectedModCount = modCount;</span><br><span class="line">       s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">       // Write out size as capacity for behavioural compatibility with clone()</span><br><span class="line">       s.writeInt(size);</span><br><span class="line"></span><br><span class="line">       // Write out all elements in the proper order.</span><br><span class="line">       for (int i=0; i&lt;size; i++) &#123;</span><br><span class="line">           s.writeObject(elementData[i]);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (modCount != expectedModCount) &#123;</span><br><span class="line">           throw new ConcurrentModificationException();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span><br><span class="line">    * deserialize it).</span><br><span class="line">    */</span><br><span class="line">   private void readObject(java.io.ObjectInputStream s)</span><br><span class="line">       throws java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">       elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">       // Read in size, and any hidden stuff</span><br><span class="line">       s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">       // Read in capacity</span><br><span class="line">       s.readInt(); // ignored</span><br><span class="line"></span><br><span class="line">       if (size &gt; 0) &#123;</span><br><span class="line">           // be like clone(), allocate array based upon size not capacity</span><br><span class="line">           ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">           Object[] a = elementData;</span><br><span class="line">           // Read in all elements in the proper order.</span><br><span class="line">           for (int i=0; i&lt;size; i++) &#123;</span><br><span class="line">               a[i] = s.readObject();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>内部类-迭代器的实现</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class="line">    int cursor;       // index of next element to return 下一个元素的索引 默认初始为0</span><br><span class="line">    int lastRet = -1; // index of last element returned; -1 if no such 设置上一次返回的元素的下标</span><br><span class="line">    int expectedModCount = modCount; //保存modCount，迭代的时候不允许修改数据结构</span><br><span class="line"></span><br><span class="line">    //是否有下一个元素</span><br><span class="line">    public boolean hasNext() &#123;</span><br><span class="line">        return cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //获取下一个元素值</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public E next() &#123;</span><br><span class="line">        //首先会先检查modCount == expectedModCount 如果不相等 抛出异常</span><br><span class="line">        checkForComodification();</span><br><span class="line">        int i = cursor;</span><br><span class="line">        //这里的判断，我认为是checkForComodification()之后，数据结构可能会发生修改，下同</span><br><span class="line">        if (i &gt;= size)</span><br><span class="line">            throw new NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">        if (i &gt;= elementData.length)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        //下个元素下标，当cursor==size时，该位置是没有元素的 0 —— size-1 总共size个元素</span><br><span class="line">        cursor = i + 1;</span><br><span class="line">        //返回当前迭代索引的元素 设置上一次返回的元素的下标</span><br><span class="line">        return (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void remove() &#123;</span><br><span class="line">        if (lastRet &lt; 0)</span><br><span class="line">            throw new IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //调用ArrayList里的remove方法，把迭代的当前位置的元素remove，调用remove()，lastRef之后的元素依次往前移</span><br><span class="line">            ArrayList.this.remove(lastRet);</span><br><span class="line">            //所以这里把cursor的值赋为lastRet，因为下一个元素依次往前移了，下一个元素从lastRet位置开始</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            //置为-1 以防再次remove</span><br><span class="line">            lastRet = -1;</span><br><span class="line">            //remove后数据结构发生改变。modCount也会变</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        //当前列表的size</span><br><span class="line">        final int size = ArrayList.this.size;</span><br><span class="line">        int i = cursor;</span><br><span class="line">        if (i &gt;= size) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        final Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">        //如果i大于数组的长度，说明期间可能数据结构发生了变化</span><br><span class="line">        if (i &gt;= elementData.length) &#123;</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        while (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        // update once at end of iteration to reduce heap write traffic</span><br><span class="line">        cursor = i; //保持同步，说明已经迭代到当前位置</span><br><span class="line">        lastRet = i - 1;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        //这里默认cursor为0，假如先调用next()方法 cursor的值会发生改变，</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final void checkForComodification() &#123;</span><br><span class="line">        if (modCount != expectedModCount)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * An optimized version of AbstractList.ListItr</span><br><span class="line"> */</span><br><span class="line">private class ListItr extends Itr implements ListIterator&lt;E&gt; &#123;</span><br><span class="line">    ListItr(int index) &#123;</span><br><span class="line">        super();</span><br><span class="line">        cursor = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean hasPrevious() &#123;</span><br><span class="line">        return cursor != 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int nextIndex() &#123;</span><br><span class="line">        return cursor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int previousIndex() &#123;</span><br><span class="line">        return cursor - 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public E previous() &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        int i = cursor - 1;</span><br><span class="line">        if (i &lt; 0)</span><br><span class="line">            throw new NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">        if (i &gt;= elementData.length)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        cursor = i;</span><br><span class="line">        return (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void set(E e) &#123;</span><br><span class="line">        if (lastRet &lt; 0)</span><br><span class="line">            throw new IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            ArrayList.this.set(lastRet, e);</span><br><span class="line">        &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void add(E e) &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            int i = cursor;</span><br><span class="line">            ArrayList.this.add(i, e);</span><br><span class="line">            cursor = i + 1;</span><br><span class="line">            lastRet = -1;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>subList ——通过实现了一个内部类，这个类继承了abstractList</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span><br><span class="line">    subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">    return new SubList(this, 0, fromIndex, toIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void subListRangeCheck(int fromIndex, int toIndex, int size) &#123;</span><br><span class="line">if (fromIndex &lt; 0)</span><br><span class="line">    throw new IndexOutOfBoundsException(&quot;fromIndex = &quot; + fromIndex);</span><br><span class="line">if (toIndex &gt; size)</span><br><span class="line">    throw new IndexOutOfBoundsException(&quot;toIndex = &quot; + toIndex);</span><br><span class="line">if (fromIndex &gt; toIndex)</span><br><span class="line">    throw new IllegalArgumentException(&quot;fromIndex(&quot; + fromIndex +</span><br><span class="line">                                           &quot;) &gt; toIndex(&quot; + toIndex + &quot;)&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//subList()方法返回的是一个子列表，下面这个SubList类封装了一些操作子列表的方法。</span><br><span class="line">//里面的方法跟ArrayList里的方法类似</span><br><span class="line">//这里注意子列表插入数据时，总是在关联的parent列表（原ArrayList）里面插入，然后确定子列表在父列表（ArrayList）中的offset下标</span><br><span class="line">//总之，对子表的操作实际上是对与它关联的父列表的操作</span><br><span class="line">//还有注意，subList之后对父表的数据结构的变化会导致抛出异常</span><br><span class="line">//subList中的迭代的实现跟ArrayList中的大同小异</span><br><span class="line">private class SubList extends AbstractList&lt;E&gt; implements RandomAccess &#123;</span><br><span class="line">    private final AbstractList&lt;E&gt; parent;</span><br><span class="line">    private final int parentOffset;</span><br><span class="line">    private final int offset; //在父列表中的开始的位置</span><br><span class="line">    int size;//子列表的size</span><br><span class="line"></span><br><span class="line">    SubList(AbstractList&lt;E&gt; parent,</span><br><span class="line">            int offset, int fromIndex, int toIndex) &#123;</span><br><span class="line">        this.parent = parent;</span><br><span class="line">        this.parentOffset = fromIndex;</span><br><span class="line">        this.offset = offset + fromIndex; // 0+fromIndex</span><br><span class="line">        this.size = toIndex - fromIndex;</span><br><span class="line">        this.modCount = ArrayList.this.modCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public E set(int index, E e) &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        E oldValue = ArrayList.this.elementData(offset + index);</span><br><span class="line">        ArrayList.this.elementData[offset + index] = e;</span><br><span class="line">        return oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public E get(int index) &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        return ArrayList.this.elementData(offset + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int size() &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        return this.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void add(int index, E e) &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        parent.add(parentOffset + index, e);</span><br><span class="line">        this.modCount = parent.modCount;</span><br><span class="line">        this.size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public E remove(int index) &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        E result = parent.remove(parentOffset + index);</span><br><span class="line">        this.modCount = parent.modCount;</span><br><span class="line">        this.size--;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void removeRange(int fromIndex, int toIndex) &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        parent.removeRange(parentOffset + fromIndex,</span><br><span class="line">                           parentOffset + toIndex);</span><br><span class="line">        this.modCount = parent.modCount;</span><br><span class="line">        this.size -= toIndex - fromIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">        return addAll(this.size, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        int cSize = c.size();</span><br><span class="line">        if (cSize==0)</span><br><span class="line">            return false;</span><br><span class="line"></span><br><span class="line">        checkForComodification();</span><br><span class="line">        parent.addAll(parentOffset + index, c);</span><br><span class="line">        this.modCount = parent.modCount;</span><br><span class="line">        this.size += cSize;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    //这里override了</span><br><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">    //调用父类abstractList的方法，这个方法里调用了listIterator(final int index) ,然后下面重写了这个方法</span><br><span class="line">        return listIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //这里override了</span><br><span class="line">    public ListIterator&lt;E&gt; listIterator(final int index) &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        final int offset = this.offset;</span><br><span class="line"></span><br><span class="line">        return new ListIterator&lt;E&gt;() &#123;</span><br><span class="line">            int cursor = index;</span><br><span class="line">            int lastRet = -1;</span><br><span class="line">            int expectedModCount = ArrayList.this.modCount;</span><br><span class="line"></span><br><span class="line">            public boolean hasNext() &#123;</span><br><span class="line">                return cursor != SubList.this.size;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">            public E next() &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                int i = cursor;</span><br><span class="line">                if (i &gt;= SubList.this.size)</span><br><span class="line">                    throw new NoSuchElementException();</span><br><span class="line">                Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">                if (offset + i &gt;= elementData.length)</span><br><span class="line">                    throw new ConcurrentModificationException();</span><br><span class="line">                cursor = i + 1;</span><br><span class="line">                return (E) elementData[offset + (lastRet = i)];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public boolean hasPrevious() &#123;</span><br><span class="line">                return cursor != 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">            public E previous() &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                int i = cursor - 1;</span><br><span class="line">                if (i &lt; 0)</span><br><span class="line">                    throw new NoSuchElementException();</span><br><span class="line">                Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">                if (offset + i &gt;= elementData.length)</span><br><span class="line">                    throw new ConcurrentModificationException();</span><br><span class="line">                cursor = i;</span><br><span class="line">                return (E) elementData[offset + (lastRet = i)];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">            public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123;</span><br><span class="line">                Objects.requireNonNull(consumer);</span><br><span class="line">                final int size = SubList.this.size;</span><br><span class="line">                int i = cursor;</span><br><span class="line">                if (i &gt;= size) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                final Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">                if (offset + i &gt;= elementData.length) &#123;</span><br><span class="line">                    throw new ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">                while (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                    consumer.accept((E) elementData[offset + (i++)]);</span><br><span class="line">                &#125;</span><br><span class="line">                // update once at end of iteration to reduce heap write traffic</span><br><span class="line">                lastRet = cursor = i;</span><br><span class="line">                checkForComodification();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public int nextIndex() &#123;</span><br><span class="line">                return cursor;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public int previousIndex() &#123;</span><br><span class="line">                return cursor - 1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void remove() &#123;</span><br><span class="line">                if (lastRet &lt; 0)</span><br><span class="line">                    throw new IllegalStateException();</span><br><span class="line">                checkForComodification();</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    SubList.this.remove(lastRet);</span><br><span class="line">                    cursor = lastRet;</span><br><span class="line">                    lastRet = -1;</span><br><span class="line">                    expectedModCount = ArrayList.this.modCount;</span><br><span class="line">                &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                    throw new ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void set(E e) &#123;</span><br><span class="line">                if (lastRet &lt; 0)</span><br><span class="line">                    throw new IllegalStateException();</span><br><span class="line">                checkForComodification();</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    ArrayList.this.set(offset + lastRet, e);</span><br><span class="line">                &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                    throw new ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void add(E e) &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    int i = cursor;</span><br><span class="line">                    SubList.this.add(i, e);</span><br><span class="line">                    cursor = i + 1;</span><br><span class="line">                    lastRet = -1;</span><br><span class="line">                    expectedModCount = ArrayList.this.modCount;</span><br><span class="line">                &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                    throw new ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            final void checkForComodification() &#123;</span><br><span class="line">                if (expectedModCount != ArrayList.this.modCount)</span><br><span class="line">                    throw new ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span><br><span class="line">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">        return new SubList(this, offset, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void rangeCheck(int index) &#123;</span><br><span class="line">        if (index &lt; 0 || index &gt;= this.size)</span><br><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void rangeCheckForAdd(int index) &#123;</span><br><span class="line">        if (index &lt; 0 || index &gt; this.size)</span><br><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String outOfBoundsMsg(int index) &#123;</span><br><span class="line">        return &quot;Index: &quot;+index+&quot;, Size: &quot;+this.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void checkForComodification() &#123;</span><br><span class="line">        if (ArrayList.this.modCount != this.modCount)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Spliterator&lt;E&gt; spliterator() &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        return new ArrayListSpliterator&lt;E&gt;(ArrayList.this, offset,</span><br><span class="line">                                           offset + this.size, this.modCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>ArrayList.forEach</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void forEach(Consumer&lt;? super E&gt; action) &#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    final int expectedModCount = modCount;</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    final E[] elementData = (E[]) this.elementData;</span><br><span class="line">    final int size = this.size;</span><br><span class="line">    for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">        action.accept(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    if (modCount != expectedModCount) &#123;</span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>当new一个ArrayList时，若没有设置一个初始容量，那么内部的elementData初始值为一个空数组，elementData={}，当第一次add数据的时候，就会给elementData设置一个初始容量10。每调用一次add()，size++;</p></li><li><p>ArrayList随机读取的性能高，原因是内部维护的是一个数组，根据给定的下标即可以从数组中读取。</p></li><li><p>ArrayList添加删除元素性能比较低，因为添加元素时首先判断是否需要扩容，是的话之后还要调用Arrays.copyOf()方法复制数组。add添加元素默认是在末尾插入，当然也可以在中间插入，这样需要移动大量的元素，效率就低了。删除的时候是删除该元素在数组中第一次出现的位置，也可能需要移动大量的元素。</p></li><li>ArrayList内部的elementData数组的长度远远大于size的时候，会造成内存空间上的浪费，可以通过trimToSize()方法，清除空闲的空间</li><li>ArrayList不是线程安全的，在迭代列表、subList的时候发生数据结构上的变化，如添加、删除元素，会抛出ConcurrentModificationException()。多线程情况下可以考虑使用<a href="https://www.cnblogs.com/wucao/p/5350461.html" target="_blank" rel="external">CopyOnWriteArrayList</a>。</li><li>ArrayList.subList()分割出来的子列表是SubList类型的，这个类有个成员属性AbstractList<e> parent是来存放被分割的列表的引用的,对子列表的操作，如添加元素，实际上都是在操作父列表。</e></li><li>ArrayList里面的元素是顺序存储的，允许存储重复数据，允许存储空值null</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ArrayList解析-基于jdk1-8&quot;&gt;&lt;a href=&quot;#ArrayList解析-基于jdk1-8&quot; class=&quot;headerlink&quot; title=&quot;ArrayList解析-基于jdk1.8&quot;&gt;&lt;/a&gt;&lt;strong&gt;ArrayList解析-基于jdk1.8&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList默认的初始大小为10&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Default initial capacity.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static final int DEFAULT_CAPACITY = 10;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList内部维护的数组&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;transient Object[] elementData;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ArrayList存放数据的数组&lt;br&gt;注：transient关键字，默认情况下,对象的所有成员变量都将被持久化.在某些情况下,如果你想避免持久化对象的一些成员变量,你可以使用transient关键字来标记他们，换句话说就是transient标记的成员变量不参与序列化过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://ash1daMANA.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ash1daMANA.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>spring boot配置静态资源</title>
    <link href="http://ash1daMANA.github.io/2018/01/03/spring-boot-note2/"/>
    <id>http://ash1daMANA.github.io/2018/01/03/spring-boot-note2/</id>
    <published>2018-01-03T02:22:45.000Z</published>
    <updated>2018-01-03T04:21:05.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-boot-配置静态资源"><a href="#spring-boot-配置静态资源" class="headerlink" title="spring boot 配置静态资源"></a>spring boot 配置静态资源</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>紧接着上一篇文章，这里使用Nginx的反向代理来处理静态资源。其实这里已经跟spring boot应用没多大关系了。如果没有看过上一篇文章，可以先看一下<strong><a href="http://ash1damana.com/2018/01/01/spring-boot/" target="_blank" rel="external">spring boot配置静态资源</a></strong></p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><strong>Nginx</strong>是一个开源的高性能的Web服务器，常用来做反向代理与负载均衡，在连接高并发的情况下，Nginx是Apahe服务器不错的替代品。具体介绍可以看一下<strong><a href="http://note.youdao.com/noteshare?id=a98571f3d995ad706657639ebf895836&amp;sub=d7cb65d950c6e365b918ed72172b609b" target="_blank" rel="external">Nginx详解</a></strong></p></blockquote><a id="more"></a><p><br></p><h3 id="spring-boot配置"><a href="#spring-boot配置" class="headerlink" title="spring boot配置"></a>spring boot配置</h3><blockquote><p>application.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server.port=5200</span><br><span class="line">server.session.timeout=3600</span><br><span class="line">server.context-path=/MySchool</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br><span class="line">server.tomcat.max-threads=20</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line"></span><br><span class="line">debug=false</span><br><span class="line">mybatis.mapper-locations=classpath:mapping/*.xml</span><br><span class="line">mybatis.type-aliases-package=com.ty.myschool.entity</span><br><span class="line"></span><br><span class="line">spring.mail.host=smtp.163.com</span><br><span class="line">spring.mail.username=123@163.com</span><br><span class="line">spring.mail.password=123</span><br><span class="line">spring.mail.properties.mail.smtp.auth=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.enable=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.required=true</span><br><span class="line">spring.mail.default-encoding=utf-8</span><br><span class="line"></span><br><span class="line">jdbc.type=mysql</span><br><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/onlineschool?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br><span class="line">jdbc.connectionTestQuery=SELECT 1 FROM dual</span><br><span class="line">jdbc.maximumPoolSize=12</span><br><span class="line">jdbc.minimumIdle=1</span><br><span class="line">jdbc.maxLifetime=2000000</span><br><span class="line">jdbc.connectionTimeout=30000</span><br><span class="line">jdbc.idleTimeout=30000</span><br><span class="line"></span><br><span class="line">mail.findPassword.subject=密码重置邮件</span><br><span class="line">mail.findPassword.content=请点击以下链接&lt;br/&gt;&lt;a href=&apos;&#123;0&#125;&apos;&gt;重置密码&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">static.url=/usr/local/project/myschool/static/</span><br><span class="line">static.picture.url=file/pictures/</span><br><span class="line">static.video.url=file/videos/</span><br><span class="line">static.websource.url=file/websource/</span><br></pre></td></tr></table></figure><p><br><br>那么首先启动应用以后，访问<a href="http://10.14.1.59:5200/MySchool/login，" target="_blank" rel="external">http://10.14.1.59:5200/MySchool/login，</a> 如图：<br><img src="https://s1.ax1x.com/2018/01/03/p9U2vT.png" alt="tu1"></p><p>然后查看应用的日志，可以看到一些静态资源如js、css的请求。<strong>注：这里把这些静态资源放在了应用的static文件夹。</strong><br><img src="https://s1.ax1x.com/2018/01/03/p9UWKU.png" alt="tu2"></p><p>接着我把这些静态资源文件全都复制到了<strong>application.properties</strong>配置文件中填写的路径：/usr/local/project/myschool/static/file/websource/ </p><p>这时候轮到Nginx出场了，进入Nginx的conf文件夹，修改<strong>nginx.conf</strong>文件，如下：</p><blockquote><p>nginx.conf</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    upstream sourceserver &#123;</span><br><span class="line">server localhost:5200;</span><br><span class="line">keepalive 128;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       # location ~* .*\.(js|css|ico|png|jpg|eot|svg|ttf|woff|less|html|otf|gif|woff2)$ &#123;</span><br><span class="line">       #     root /usr/local/project/myschool/static/file/websource;  </span><br><span class="line">       # &#125;</span><br><span class="line"></span><br><span class="line">location /MySchool/assets/ &#123;</span><br><span class="line">     root /usr/local/project/myschool/static/file/websource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /MySchool/musik/ &#123;</span><br><span class="line">     root /usr/local/project/myschool/static/file/websource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /MySchool/file/ &#123;</span><br><span class="line">     alias /usr/local/project/myschool/static/file/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /MySchool &#123;</span><br><span class="line">proxy_pass   http://sourceserver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Nginx服务器之后，再访问<a href="http://10.14.1.59:80/MySchool/login，查看日志，如下：" target="_blank" rel="external">http://10.14.1.59:80/MySchool/login，查看日志，如下：</a><br><img src="https://s1.ax1x.com/2018/01/03/p9dltA.png" alt="tu3"><br>可以看到静态资源请求被Nginx处理了</p><hr><p>接下来，我们的Test类就要出场啦。因为上传的应用里还没写上传的图片保存到自定义路径，所以这里由Test类从源路径读取图片保存到目标路径来模拟。</p><blockquote><p>Test.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        String baseUrl=&quot;/root/nginx/image/1.jpg&quot;;</span><br><span class="line">        String targetUrl=&quot;/usr/local/project/myschool/static/&quot;+&quot;file/pictures/&quot;;</span><br><span class="line">        File file=new File(baseUrl);</span><br><span class="line">        File outfile=new File(targetUrl);</span><br><span class="line">        if(!outfile.exists())&#123;</span><br><span class="line">            outfile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        FileInputStream fileInputStream = new FileInputStream(file);</span><br><span class="line">        FileOutputStream fileOutputStream = new FileOutputStream(targetUrl+&quot;mana.jpg&quot;);</span><br><span class="line">        int len=0;</span><br><span class="line">        byte b[] = new byte[1024];</span><br><span class="line">        while ((len = fileInputStream.read(b)) != -1) &#123;</span><br><span class="line">            fileOutputStream.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.flush();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <a href="http://10.14.1.59/MySchool/file/pictures/mana.jpg" target="_blank" rel="external">http://10.14.1.59/MySchool/file/pictures/mana.jpg</a><br>可以看到这个请求被Nginx处理了，但是未找到这个资源。</p><p><img src="https://s1.ax1x.com/2018/01/03/p9rdWd.png" alt="tu4">  </p><p>接着把Test.java 编译运行后，再次请求这个URL。<br><img src="https://s1.ax1x.com/2018/01/03/p9ryef.png" alt="tu5">  </p><p><br><br>这样自定义存储路径中的静态资源就可以访问到了~  </p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>这次主要的角色就是Nginx，使用Nginx还可以把http强制转成https。<br>关于Nginx更多的使用方法还需要深入的了解和研究。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-boot-配置静态资源&quot;&gt;&lt;a href=&quot;#spring-boot-配置静态资源&quot; class=&quot;headerlink&quot; title=&quot;spring boot 配置静态资源&quot;&gt;&lt;/a&gt;spring boot 配置静态资源&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;紧接着上一篇文章，这里使用Nginx的反向代理来处理静态资源。其实这里已经跟spring boot应用没多大关系了。如果没有看过上一篇文章，可以先看一下&lt;strong&gt;&lt;a href=&quot;http://ash1damana.com/2018/01/01/spring-boot/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spring boot配置静态资源&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt;是一个开源的高性能的Web服务器，常用来做反向代理与负载均衡，在连接高并发的情况下，Nginx是Apahe服务器不错的替代品。具体介绍可以看一下&lt;strong&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=a98571f3d995ad706657639ebf895836&amp;amp;sub=d7cb65d950c6e365b918ed72172b609b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx详解&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://ash1daMANA.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ash1daMANA.github.io/tags/java/"/>
    
      <category term="spring" scheme="http://ash1daMANA.github.io/tags/spring/"/>
    
      <category term="nginx" scheme="http://ash1daMANA.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>spring boot配置静态资源</title>
    <link href="http://ash1daMANA.github.io/2018/01/01/spring-boot-note1/"/>
    <id>http://ash1daMANA.github.io/2018/01/01/spring-boot-note1/</id>
    <published>2018-01-01T14:44:25.000Z</published>
    <updated>2018-01-03T04:23:12.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-boot-配置静态资源"><a href="#spring-boot-配置静态资源" class="headerlink" title="spring boot 配置静态资源"></a>spring boot 配置静态资源</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><strong>spring boot</strong>是一个适合进行快速开发的框架，<strong>spring boot</strong>奉行“习惯优于配置”的原则，其目的是为了简化应用的初始搭建。使用<br>java配置替代xml配置，并且内嵌了Tomcat容器，应用可以直接以jar包的形式运行。</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p>那么这里问题就来了：因为内嵌Tomcat，应用以java -jar的形式启动以后，假如有这样的场景，用户需要自定义头像，那么就需要上传图片，这个图片保存在哪呢？的确，应用中<strong>static</strong>文件夹会存放一些如logo.ico、jQuery.js这类的静态资源。那么用户自定义的图片也存放在这不合适吧。当然有小伙伴会想到把图片序列化成二进制数据保存到数据库中，这种方法也是可行的，但这样IO成本会增大；还有一种方法就是保存在服务器的本地文件夹中，由应用来读取本地的静态资源。</p><a id="more"></a><h3 id="spring-boot配置"><a href="#spring-boot配置" class="headerlink" title="spring boot配置"></a>spring boot配置</h3><blockquote><p>application.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server.port=5200</span><br><span class="line">server.session.timeout=3600</span><br><span class="line">server.context-path=/MySchool</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br><span class="line">server.tomcat.max-threads=20</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line"></span><br><span class="line">debug=false</span><br><span class="line">mybatis.mapper-locations=classpath:mapping/*.xml</span><br><span class="line">mybatis.type-aliases-package=com.ty.myschool.entity</span><br><span class="line"></span><br><span class="line">spring.mail.host=smtp.163.com</span><br><span class="line">spring.mail.username=123@163.com</span><br><span class="line">spring.mail.password=123</span><br><span class="line">spring.mail.properties.mail.smtp.auth=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.enable=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.required=true</span><br><span class="line">spring.mail.default-encoding=utf-8</span><br><span class="line"></span><br><span class="line">jdbc.type=mysql</span><br><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/onlineschool?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br><span class="line">jdbc.connectionTestQuery=SELECT 1 FROM dual</span><br><span class="line">jdbc.maximumPoolSize=12</span><br><span class="line">jdbc.minimumIdle=1</span><br><span class="line">jdbc.maxLifetime=2000000</span><br><span class="line">jdbc.connectionTimeout=30000</span><br><span class="line">jdbc.idleTimeout=30000</span><br><span class="line"></span><br><span class="line">mail.findPassword.subject=密码重置邮件</span><br><span class="line">mail.findPassword.content=请点击以下链接&lt;br/&gt;&lt;a href=&apos;&#123;0&#125;&apos;&gt;重置密码&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">static.url=/usr/local/project/myschool/static/</span><br><span class="line">static.picture.url=file/pictures/</span><br><span class="line">static.video.url=file/videos/</span><br><span class="line">static.websource.url=file/websource/</span><br></pre></td></tr></table></figure><blockquote><p>adapter</p></blockquote><p>这里需要写一个<strong>@configuration</strong>标注的继承WebMvcConfigurerAdapter的类，参考如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class WebSourceAdapter  extends WebMvcConfigurerAdapter&#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;static.url&#125;&quot;)</span><br><span class="line">    private String staticUrl;</span><br><span class="line">    @Value(&quot;$&#123;static.picture.url&#125;&quot;)</span><br><span class="line">    private String pictureUrl;</span><br><span class="line">    @Value(&quot;$&#123;static.video.url&#125;&quot;)</span><br><span class="line">    private String videoUrl;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(&quot;/file/pictures/**&quot;).addResourceLocations(&quot;file:&quot;+staticUrl+pictureUrl);</span><br><span class="line">        registry.addResourceHandler(&quot;/file/videos/**&quot;).addResourceLocations(&quot;file:&quot;+staticUrl+videoUrl);</span><br><span class="line">        super.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是代码方式拦截器来映射静态资源，<strong>file：</strong>的作用是定位到本地的文件夹，这里的意思是请求的路径为<strong>/file/pictures/</strong>去定位到本地文件夹中去寻找资源。</p><hr><p>接下来我用的虚拟机，系统是centos6.5来模拟服务器。<br>应用打jar包上传后进行启动。<br><br><br>因为应用中没写保存文件的方法，这里我写了一个测试类，并且在源路径上放置一张图片，执行测试方法以后，图片保存到配置文件中的目标路径中，<br>再由浏览器直接访问。</p><blockquote><p>Test.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        String baseUrl=&quot;/root/nginx/image/1.jpg&quot;;</span><br><span class="line">        String targetUrl=&quot;/usr/local/project/myschool/static/&quot;+&quot;file/pictures/&quot;;</span><br><span class="line">        File file=new File(baseUrl);</span><br><span class="line">        File outfile=new File(targetUrl);</span><br><span class="line">        if(!outfile.exists())&#123;</span><br><span class="line">            outfile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        FileInputStream fileInputStream = new FileInputStream(file);</span><br><span class="line">        FileOutputStream fileOutputStream = new FileOutputStream(targetUrl+&quot;mana.jpg&quot;);</span><br><span class="line">        int len=0;</span><br><span class="line">        byte b[] = new byte[1024];</span><br><span class="line">        while ((len = fileInputStream.read(b)) != -1) &#123;</span><br><span class="line">            fileOutputStream.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.flush();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面是源路径/root/nginx/image/1.jpg</p></blockquote><p><img src="https://s1.ax1x.com/2018/01/02/ppVKKO.jpg" alt="tu1"></p><p><br></p><blockquote><p>然后请求链接，没找到资源。<br><a href="http://192.168.1.13:5200/MySchool/file/pictures/mana.jpg" target="_blank" rel="external">http://192.168.1.13:5200/MySchool/file/pictures/mana.jpg</a></p></blockquote><p><img src="https://s1.ax1x.com/2018/01/02/ppVMrD.jpg" alt="tu2"></p><p><br></p><blockquote><p>接下来javac Test.java、 java Test编译执行测试类。再次访问以上链接。</p></blockquote><p><img src="https://s1.ax1x.com/2018/01/02/ppV1VH.jpg" alt="tu3"></p><p><br></p><blockquote><p>访问目标路径，发现文件夹下已存在图片。</p></blockquote><p><img src="https://s1.ax1x.com/2018/01/02/ppV3ad.jpg" alt="tu4"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>这个小测试算是完成了，对于http请求的动静分离我们还可以使用nginx来进行反向代理，下次我再使用nginx来做一次测试。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-boot-配置静态资源&quot;&gt;&lt;a href=&quot;#spring-boot-配置静态资源&quot; class=&quot;headerlink&quot; title=&quot;spring boot 配置静态资源&quot;&gt;&lt;/a&gt;spring boot 配置静态资源&lt;/h1&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;spring boot&lt;/strong&gt;是一个适合进行快速开发的框架，&lt;strong&gt;spring boot&lt;/strong&gt;奉行“习惯优于配置”的原则，其目的是为了简化应用的初始搭建。使用&lt;br&gt;java配置替代xml配置，并且内嵌了Tomcat容器，应用可以直接以jar包的形式运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/h2&gt;&lt;p&gt;那么这里问题就来了：因为内嵌Tomcat，应用以java -jar的形式启动以后，假如有这样的场景，用户需要自定义头像，那么就需要上传图片，这个图片保存在哪呢？的确，应用中&lt;strong&gt;static&lt;/strong&gt;文件夹会存放一些如logo.ico、jQuery.js这类的静态资源。那么用户自定义的图片也存放在这不合适吧。当然有小伙伴会想到把图片序列化成二进制数据保存到数据库中，这种方法也是可行的，但这样IO成本会增大；还有一种方法就是保存在服务器的本地文件夹中，由应用来读取本地的静态资源。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://ash1daMANA.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ash1daMANA.github.io/tags/java/"/>
    
      <category term="spring" scheme="http://ash1daMANA.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>maven</title>
    <link href="http://ash1daMANA.github.io/2017/11/21/maven/"/>
    <id>http://ash1daMANA.github.io/2017/11/21/maven/</id>
    <published>2017-11-21T07:37:20.000Z</published>
    <updated>2017-11-21T07:59:33.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pom-xml-配置-相关整理"><a href="#pom-xml-配置-相关整理" class="headerlink" title="pom.xml 配置 相关整理"></a>pom.xml 配置 相关整理</h3><blockquote><p>packaging</p></blockquote><hr><a id="more"></a><blockquote><p>properties</p></blockquote><hr><blockquote><p>dependency</p></blockquote><hr><blockquote><blockquote><p>optional</p></blockquote></blockquote><hr><blockquote><blockquote><p>test</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;pom-xml-配置-相关整理&quot;&gt;&lt;a href=&quot;#pom-xml-配置-相关整理&quot; class=&quot;headerlink&quot; title=&quot;pom.xml 配置 相关整理&quot;&gt;&lt;/a&gt;pom.xml 配置 相关整理&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;packaging&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="maven" scheme="http://ash1daMANA.github.io/categories/maven/"/>
    
    
      <category term="maven" scheme="http://ash1daMANA.github.io/tags/maven/"/>
    
      <category term="pom.xml" scheme="http://ash1daMANA.github.io/tags/pom-xml/"/>
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="http://ash1daMANA.github.io/2017/11/21/linux/"/>
    <id>http://ash1daMANA.github.io/2017/11/21/linux/</id>
    <published>2017-11-21T07:37:20.000Z</published>
    <updated>2017-11-21T07:59:23.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux-常用命令整理"><a href="#linux-常用命令整理" class="headerlink" title="linux 常用命令整理"></a>linux 常用命令整理</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux-常用命令整理&quot;&gt;&lt;a href=&quot;#linux-常用命令整理&quot; class=&quot;headerlink&quot; title=&quot;linux 常用命令整理&quot;&gt;&lt;/a&gt;linux 常用命令整理&lt;/h2&gt;
      
    
    </summary>
    
      <category term="linux" scheme="http://ash1daMANA.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://ash1daMANA.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>win10下解决MarkdownPad2 html渲染出错的问题</title>
    <link href="http://ash1daMANA.github.io/2017/11/15/1/"/>
    <id>http://ash1daMANA.github.io/2017/11/15/1/</id>
    <published>2017-11-15T10:26:18.324Z</published>
    <updated>2017-11-20T15:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>第一次使用MarkdownPad2的小伙伴可能会遇到这个问题：html渲染组件出错。根据官方说法，win8系统中会存在这个问题，当然win10也不例外。<br><a id="more"></a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了修复这个问题，你需要安装一个SDK工具包  </p><blockquote><p>please click here ! <a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" target="_blank" rel="external">Awesomium 1.6.6 SDK</a></p></blockquote><p>若以上方案没有解决的话，再尝试安装个微软的渲染插件</p><blockquote><p>please click here ! <a href="http://www.microsoft.com/en-us/download/details.aspx?id=8109" target="_blank" rel="external">Microsoft’s DirectX End-User Runtimes (June 2010).</a></p></blockquote><p>若以上方案都没有解决的话 <strong>那换个电（工）脑（具）吧</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;第一次使用MarkdownPad2的小伙伴可能会遇到这个问题：html渲染组件出错。根据官方说法，win8系统中会存在这个问题，当然win10也不例外。&lt;br&gt;
    
    </summary>
    
      <category term="markdown" scheme="http://ash1daMANA.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://ash1daMANA.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
