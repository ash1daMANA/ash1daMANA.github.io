<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>啦啦啦拉比克</title>
  
  <subtitle>喜欢的话就坚持吧。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ash1daMANA.github.io/"/>
  <updated>2018-01-15T15:05:00.000Z</updated>
  <id>http://ash1daMANA.github.io/</id>
  
  <author>
    <name>taoyong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java集合框架笔记-ArrayList</title>
    <link href="http://ash1daMANA.github.io/2018/01/15/notes-01/"/>
    <id>http://ash1daMANA.github.io/2018/01/15/notes-01/</id>
    <published>2018-01-15T15:04:33.180Z</published>
    <updated>2018-01-15T15:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ArrayList笔记"><a href="#ArrayList笔记" class="headerlink" title="ArrayList笔记"></a><strong>ArrayList笔记</strong></h3><ul><li><strong>ArrayList默认的初始大小为10</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Default initial capacity.</span><br><span class="line"> */</span><br><span class="line">private static final int DEFAULT_CAPACITY = 10;</span><br></pre></td></tr></table></figure><ul><li><strong>ArrayList内部维护的数组</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Object[] elementData;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>ArrayList存放数据的数组</p></blockquote><ul><li><strong>size</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The size of the ArrayList (the number of elements it contains).</span><br><span class="line"> *</span><br><span class="line"> * @serial</span><br><span class="line"> */</span><br><span class="line">private int size;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>可以从注释上看得很明白，size等于包含的元素数量， size不等于elementData.length;</p></blockquote><ul><li><strong>构造方法</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList(int initialCapacity) &#123;</span><br><span class="line">    if (initialCapacity &gt; 0) &#123;</span><br><span class="line">        this.elementData = new Object[initialCapacity];</span><br><span class="line">    &#125; else if (initialCapacity == 0) &#123;</span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>构造一个自定义初始容量的list。<br><a id="more"></a></p><ul><li><strong>构造方法</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Constructs an empty list with an initial capacity of ten.</span><br><span class="line"> */</span><br><span class="line">public ArrayList() &#123;</span><br><span class="line">    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>构造一个初始容量为空的list。</p></blockquote><ul><li><strong>构造方法</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    if ((size = elementData.length) != 0) &#123;</span><br><span class="line">        // c.toArray might (incorrectly) not return Object[] (see 6260652)</span><br><span class="line">        if (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // replace with empty array.</span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>构造一个list，参数列表为Collection，把参数的集合通过toArray()方法赋值给elementData，</p></blockquote><ul><li><strong>缩小容量</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void trimToSize() &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    if (size &lt; elementData.length) &#123;</span><br><span class="line">        elementData = (size == 0)</span><br><span class="line">          ? EMPTY_ELEMENTDATA</span><br><span class="line">          : Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>根据size的大小返回一个新的数组，size=0则返回一个空的数组，否则返回一个size长度、内容与原数组相同的数组。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void ensureCapacity(int minCapacity) &#123;</span><br><span class="line">    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">        // any size if not default element table</span><br><span class="line">        ? 0</span><br><span class="line">        // larger than default for default empty table. It&apos;s already</span><br><span class="line">        // supposed to be at default size.</span><br><span class="line">        : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">    if (minCapacity &gt; minExpand) &#123;</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据原数组的长度来确定要不要继续扩容</p></blockquote><ul><li><strong>确定扩充数组的大小</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">     if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">         minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ensureExplicitCapacity(minCapacity);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如果当前list的elementData数组是个空数组，即elementData={}。取DEFAULT_CAPACITY与方法参数的最大值</p></blockquote><ul><li>紧接着<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>判断传进来的方法的参数minCapacity与elementData数组当前长度的大小，如果条件成立，即minCapacity &gt; elementData.length，说明当前的容量确实不够用，需要扩容。 </p></blockquote><ul><li>紧接着<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    // minCapacity is usually close to size, so this is a win:</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>可以从源码明显的看到，newCapacity的值为oldCapacity+(oldCapacity) &gt;&gt;1（右移1位即除以2）即等于1.5倍的oldCapacity。然后比较newCapacity与minCapacity的大小，然后根据Arrays的copyOf方法生成一个新的数组，内容与原数组保持一致，长度为newCapacity。</p></blockquote><ul><li><strong>size</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int size() &#123;</span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>直接返回size</p></blockquote><ul><li><strong>isEmpty</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">    return size == 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>根据size与0比较的布尔值来判断是否为空。举个例子 new ArrayList(10); ,当没有给list赋值时，这个时候size=0,尽管elementData.length=10。</p></blockquote><ul><li><strong>contains</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean contains(Object o) &#123;</span><br><span class="line">    return indexOf(o) &gt;= 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>下面来看 indexOf()方法</p></blockquote><ul><li><strong>indexOf()</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int indexOf(Object o) &#123;</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (int i = 0; i &lt; size; i++)</span><br><span class="line">            if (elementData[i]==null)</span><br><span class="line">                return i;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int i = 0; i &lt; size; i++)</span><br><span class="line">            if (o.equals(elementData[i]))</span><br><span class="line">                return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>根据参数值是否为null，来遍历数组，找到相同的值即返回当前的下标。</p></blockquote><ul><li><strong>lastIndexOf</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int lastIndexOf(Object o) &#123;</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (int i = size-1; i &gt;= 0; i--)</span><br><span class="line">            if (elementData[i]==null)</span><br><span class="line">                return i;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int i = size-1; i &gt;= 0; i--)</span><br><span class="line">            if (o.equals(elementData[i]))</span><br><span class="line">                return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>看方法名就知道，从数组尾部开始遍历，找到相同的值即返回当前下标。</p></blockquote><ul><li><strong>clone</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public Object clone() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) super.clone();</span><br><span class="line">        v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">        v.modCount = 0;</span><br><span class="line">        return v;</span><br><span class="line">    &#125; catch (CloneNotSupportedException e) &#123;</span><br><span class="line">        // this shouldn&apos;t happen, since we are Cloneable</span><br><span class="line">        throw new InternalError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>clone()方法，调用父类的clone()方法,</p></blockquote><ul><li><p><strong>toArray</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Object[] toArray() &#123;</span><br><span class="line">    return Arrays.copyOf(elementData, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>toArray</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">     if (a.length &lt; size)</span><br><span class="line">         // Make a new array of a&apos;s runtime type, but my contents:</span><br><span class="line">         return (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">     System.arraycopy(elementData, 0, a, 0, size);</span><br><span class="line">     if (a.length &gt; size)</span><br><span class="line">         a[size] = null;</span><br><span class="line">     return a;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>get</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public E get(int index) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    return elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>get()方法，根据给出的下标去查找值，在这之前调用rangeCheck()方法来确保index是合法的。</p></blockquote><ul><li><strong>set</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public E set(int index, E element) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    return oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>set()方法，根据给定的下标与元素设置值，在这之前调用rangeCheck()方法来确保index是合法的。</p></blockquote><ul><li><p><strong>确保下标合法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void rangeCheck(int index) &#123;</span><br><span class="line">     if (index &gt;= size)</span><br><span class="line">         throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * A version of rangeCheck used by add and addAll.</span><br><span class="line">  */</span><br><span class="line"> private void rangeCheckForAdd(int index) &#123;</span><br><span class="line">     if (index &gt; size || index &lt; 0)</span><br><span class="line">         throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">     private String outOfBoundsMsg(int index) &#123;</span><br><span class="line">     return &quot;Index: &quot;+index+&quot;, Size: &quot;+size;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>add</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>add()方法是在数组的末尾添加新的元素,在这之前调用ensureCapacityInternal()方法确认数组的容量，然后elementData(size)=e ;size++;</p></blockquote><ul><li><strong>add</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + 1,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>扩容之后，把elementData数组index下标开始的元素内容依次往后移，然后在index下标处插入新的元素。</p></blockquote><ul><li><strong>remove</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public E remove(int index) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    int numMoved = size - index - 1;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = null; // clear to let GC do its work</span><br><span class="line"></span><br><span class="line">    return oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如删除的元素处于中间位置，那么把从index+1开始的元素内容依次往前移，这样的话index+1就覆盖了index位置的内容，然后末尾就多出来一条，接着–size,size-1 ，然后把末尾赋值为null</p></blockquote><ul><li><strong>remove</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (int index = 0; index &lt; size; index++)</span><br><span class="line">            if (elementData[index] == null) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int index = 0; index &lt; size; index++)</span><br><span class="line">            if (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>remove()方法，通过遍历数组来查找是否有参数对象，如有，通过当前的下标进行remove。看一下fastRemove()方法。</p></blockquote><ul><li><strong>fastRemove</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void fastRemove(int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    int numMoved = size - index - 1;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = null; // clear to let GC do its work</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>跟上面一样</p></blockquote><ul><li><p><strong>clear</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void clear() &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    // clear to let GC do its work</span><br><span class="line">    for (int i = 0; i &lt; size; i++)</span><br><span class="line">        elementData[i] = null;</span><br><span class="line"></span><br><span class="line">    size = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>addAll</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    int numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  // Increments modCount</span><br><span class="line">    System.arraycopy(a, 0, elementData, size, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    return numNew != 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    int numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  // Increments modCount</span><br><span class="line"></span><br><span class="line">    int numMoved = size - index;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">    System.arraycopy(a, 0, elementData, index, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    return numNew != 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>removeRange</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protected void removeRange(int fromIndex, int toIndex) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    int numMoved = size - toIndex;</span><br><span class="line">    System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                     numMoved);</span><br><span class="line"></span><br><span class="line">    // clear to let GC do its work</span><br><span class="line">    int newSize = size - (toIndex-fromIndex);</span><br><span class="line">    for (int i = newSize; i &lt; size; i++) &#123;</span><br><span class="line">        elementData[i] = null;</span><br><span class="line">    &#125;</span><br><span class="line">    size = newSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>从elementData数组中移除一组数据，下标从fromidex到toIndex。然后把toIndex之后的数据移到fromIndex开始的部位进行覆盖，得到一个新的size，新size之后的数据清空。最后newSize赋值给size。</p></blockquote><ul><li><strong>batchRemove</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public boolean removeAll(Collection&lt;?&gt; c) &#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    return batchRemove(c, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public boolean retainAll(Collection&lt;?&gt; c) &#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    return batchRemove(c, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) &#123;</span><br><span class="line">    final Object[] elementData = this.elementData;</span><br><span class="line">    int r = 0, w = 0;</span><br><span class="line">    boolean modified = false;</span><br><span class="line">    try &#123;</span><br><span class="line">        for (; r &lt; size; r++)</span><br><span class="line">            if (c.contains(elementData[r]) == complement)</span><br><span class="line">                elementData[w++] = elementData[r];</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // Preserve behavioral compatibility with AbstractCollection,</span><br><span class="line">        // even if c.contains() throws.</span><br><span class="line">        if (r != size) &#123;</span><br><span class="line">            System.arraycopy(elementData, r,</span><br><span class="line">                             elementData, w,</span><br><span class="line">                             size - r);</span><br><span class="line">            w += size - r;</span><br><span class="line">        &#125;</span><br><span class="line">        if (w != size) &#123;</span><br><span class="line">            // clear to let GC do its work</span><br><span class="line">            for (int i = w; i &lt; size; i++)</span><br><span class="line">                elementData[i] = null;</span><br><span class="line">            modCount += size - w;</span><br><span class="line">            size = w;</span><br><span class="line">            modified = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>待研究</p></blockquote><ul><li><strong>这里补充一下System.arraycopy</strong><blockquote><p>arraycopy(Object src,int srcPos,Object dest, int destPos,int length);<br>src :源数组<br>srcPost:开始位置<br>dest:目标数组<br>destPos:开始位置<br>length:复制的长度<br><strong>改变的是目标数组的内容</strong></p></blockquote></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>当new一个ArrayList时，若没有设置一个初始容量，那么内部的elementData初始值为一个空数组，elementData={}，当第一次add数据的时候，就会给elementData设置一个初始容量10。每调用一次add()，size++;</p></li><li><p>ArrayList随机读取的性能高，原因是内部维护的是一个数组，根据给定的下标即可以从数组中读取。</p></li><li><p>ArrayList添加删除元素性能比较低，因为添加元素时首先判断是否需要扩容，是的话之后还要调用Arrays.copyOf()方法复制数组。还有当在数组中间添加删除元素时，又要经历一次复制数组，调用System.arraycopy()方法。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ArrayList笔记&quot;&gt;&lt;a href=&quot;#ArrayList笔记&quot; class=&quot;headerlink&quot; title=&quot;ArrayList笔记&quot;&gt;&lt;/a&gt;&lt;strong&gt;ArrayList笔记&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList默认的初始大小为10&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Default initial capacity.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static final int DEFAULT_CAPACITY = 10;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList内部维护的数组&lt;/strong&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;transient Object[] elementData;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ArrayList存放数据的数组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The size of the ArrayList (the number of elements it contains).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @serial&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private int size;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可以从注释上看得很明白，size等于包含的元素数量， size不等于elementData.length;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构造方法&lt;/strong&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public ArrayList(int initialCapacity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (initialCapacity &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.elementData = new Object[initialCapacity];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (initialCapacity == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.elementData = EMPTY_ELEMENTDATA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw new IllegalArgumentException(&amp;quot;Illegal Capacity: &amp;quot;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           initialCapacity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;构造一个自定义初始容量的list。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://ash1daMANA.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ash1daMANA.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>spring boot配置静态资源</title>
    <link href="http://ash1daMANA.github.io/2018/01/03/201801034529/"/>
    <id>http://ash1daMANA.github.io/2018/01/03/201801034529/</id>
    <published>2018-01-03T02:22:45.000Z</published>
    <updated>2018-01-03T04:21:05.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-boot-配置静态资源"><a href="#spring-boot-配置静态资源" class="headerlink" title="spring boot 配置静态资源"></a>spring boot 配置静态资源</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>紧接着上一篇文章，这里使用Nginx的反向代理来处理静态资源。其实这里已经跟spring boot应用没多大关系了。如果没有看过上一篇文章，可以先看一下<strong><a href="http://ash1damana.com/2018/01/01/spring-boot/" target="_blank" rel="external">spring boot配置静态资源</a></strong></p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><strong>Nginx</strong>是一个开源的高性能的Web服务器，常用来做反向代理与负载均衡，在连接高并发的情况下，Nginx是Apahe服务器不错的替代品。具体介绍可以看一下<strong><a href="http://note.youdao.com/noteshare?id=a98571f3d995ad706657639ebf895836&amp;sub=d7cb65d950c6e365b918ed72172b609b" target="_blank" rel="external">Nginx详解</a></strong></p></blockquote><a id="more"></a><p><br></p><h3 id="spring-boot配置"><a href="#spring-boot配置" class="headerlink" title="spring boot配置"></a>spring boot配置</h3><blockquote><p>application.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server.port=5200</span><br><span class="line">server.session.timeout=3600</span><br><span class="line">server.context-path=/MySchool</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br><span class="line">server.tomcat.max-threads=20</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line"></span><br><span class="line">debug=false</span><br><span class="line">mybatis.mapper-locations=classpath:mapping/*.xml</span><br><span class="line">mybatis.type-aliases-package=com.ty.myschool.entity</span><br><span class="line"></span><br><span class="line">spring.mail.host=smtp.163.com</span><br><span class="line">spring.mail.username=123@163.com</span><br><span class="line">spring.mail.password=123</span><br><span class="line">spring.mail.properties.mail.smtp.auth=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.enable=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.required=true</span><br><span class="line">spring.mail.default-encoding=utf-8</span><br><span class="line"></span><br><span class="line">jdbc.type=mysql</span><br><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/onlineschool?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br><span class="line">jdbc.connectionTestQuery=SELECT 1 FROM dual</span><br><span class="line">jdbc.maximumPoolSize=12</span><br><span class="line">jdbc.minimumIdle=1</span><br><span class="line">jdbc.maxLifetime=2000000</span><br><span class="line">jdbc.connectionTimeout=30000</span><br><span class="line">jdbc.idleTimeout=30000</span><br><span class="line"></span><br><span class="line">mail.findPassword.subject=密码重置邮件</span><br><span class="line">mail.findPassword.content=请点击以下链接&lt;br/&gt;&lt;a href=&apos;&#123;0&#125;&apos;&gt;重置密码&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">static.url=/usr/local/project/myschool/static/</span><br><span class="line">static.picture.url=file/pictures/</span><br><span class="line">static.video.url=file/videos/</span><br><span class="line">static.websource.url=file/websource/</span><br></pre></td></tr></table></figure><p><br><br>那么首先启动应用以后，访问<a href="http://10.14.1.59:5200/MySchool/login，" target="_blank" rel="external">http://10.14.1.59:5200/MySchool/login，</a> 如图：<br><img src="https://s1.ax1x.com/2018/01/03/p9U2vT.png" alt="tu1"></p><p>然后查看应用的日志，可以看到一些静态资源如js、css的请求。<strong>注：这里把这些静态资源放在了应用的static文件夹。</strong><br><img src="https://s1.ax1x.com/2018/01/03/p9UWKU.png" alt="tu2"></p><p>接着我把这些静态资源文件全都复制到了<strong>application.properties</strong>配置文件中填写的路径：/usr/local/project/myschool/static/file/websource/ </p><p>这时候轮到Nginx出场了，进入Nginx的conf文件夹，修改<strong>nginx.conf</strong>文件，如下：</p><blockquote><p>nginx.conf</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    upstream sourceserver &#123;</span><br><span class="line">server localhost:5200;</span><br><span class="line">keepalive 128;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       # location ~* .*\.(js|css|ico|png|jpg|eot|svg|ttf|woff|less|html|otf|gif|woff2)$ &#123;</span><br><span class="line">       #     root /usr/local/project/myschool/static/file/websource;  </span><br><span class="line">       # &#125;</span><br><span class="line"></span><br><span class="line">location /MySchool/assets/ &#123;</span><br><span class="line">     root /usr/local/project/myschool/static/file/websource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /MySchool/musik/ &#123;</span><br><span class="line">     root /usr/local/project/myschool/static/file/websource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /MySchool/file/ &#123;</span><br><span class="line">     alias /usr/local/project/myschool/static/file/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /MySchool &#123;</span><br><span class="line">proxy_pass   http://sourceserver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Nginx服务器之后，再访问<a href="http://10.14.1.59:80/MySchool/login，查看日志，如下：" target="_blank" rel="external">http://10.14.1.59:80/MySchool/login，查看日志，如下：</a><br><img src="https://s1.ax1x.com/2018/01/03/p9dltA.png" alt="tu3"><br>可以看到静态资源请求被Nginx处理了</p><hr><p>接下来，我们的Test类就要出场啦。因为上传的应用里还没写上传的图片保存到自定义路径，所以这里由Test类从源路径读取图片保存到目标路径来模拟。</p><blockquote><p>Test.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        String baseUrl=&quot;/root/nginx/image/1.jpg&quot;;</span><br><span class="line">        String targetUrl=&quot;/usr/local/project/myschool/static/&quot;+&quot;file/pictures/&quot;;</span><br><span class="line">        File file=new File(baseUrl);</span><br><span class="line">        File outfile=new File(targetUrl);</span><br><span class="line">        if(!outfile.exists())&#123;</span><br><span class="line">            outfile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        FileInputStream fileInputStream = new FileInputStream(file);</span><br><span class="line">        FileOutputStream fileOutputStream = new FileOutputStream(targetUrl+&quot;mana.jpg&quot;);</span><br><span class="line">        int len=0;</span><br><span class="line">        byte b[] = new byte[1024];</span><br><span class="line">        while ((len = fileInputStream.read(b)) != -1) &#123;</span><br><span class="line">            fileOutputStream.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.flush();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <a href="http://10.14.1.59/MySchool/file/pictures/mana.jpg" target="_blank" rel="external">http://10.14.1.59/MySchool/file/pictures/mana.jpg</a><br>可以看到这个请求被Nginx处理了，但是未找到这个资源。</p><p><img src="https://s1.ax1x.com/2018/01/03/p9rdWd.png" alt="tu4">  </p><p>接着把Test.java 编译运行后，再次请求这个URL。<br><img src="https://s1.ax1x.com/2018/01/03/p9ryef.png" alt="tu5">  </p><p><br><br>这样自定义存储路径中的静态资源就可以访问到了~  </p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>这次主要的角色就是Nginx，使用Nginx还可以把http强制转成https。<br>关于Nginx更多的使用方法还需要深入的了解和研究。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-boot-配置静态资源&quot;&gt;&lt;a href=&quot;#spring-boot-配置静态资源&quot; class=&quot;headerlink&quot; title=&quot;spring boot 配置静态资源&quot;&gt;&lt;/a&gt;spring boot 配置静态资源&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;紧接着上一篇文章，这里使用Nginx的反向代理来处理静态资源。其实这里已经跟spring boot应用没多大关系了。如果没有看过上一篇文章，可以先看一下&lt;strong&gt;&lt;a href=&quot;http://ash1damana.com/2018/01/01/spring-boot/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spring boot配置静态资源&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt;是一个开源的高性能的Web服务器，常用来做反向代理与负载均衡，在连接高并发的情况下，Nginx是Apahe服务器不错的替代品。具体介绍可以看一下&lt;strong&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=a98571f3d995ad706657639ebf895836&amp;amp;sub=d7cb65d950c6e365b918ed72172b609b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx详解&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://ash1daMANA.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ash1daMANA.github.io/tags/java/"/>
    
      <category term="spring" scheme="http://ash1daMANA.github.io/tags/spring/"/>
    
      <category term="nginx" scheme="http://ash1daMANA.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>spring boot配置静态资源</title>
    <link href="http://ash1daMANA.github.io/2018/01/01/spring-boot/"/>
    <id>http://ash1daMANA.github.io/2018/01/01/spring-boot/</id>
    <published>2018-01-01T14:44:25.000Z</published>
    <updated>2018-01-03T04:23:12.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-boot-配置静态资源"><a href="#spring-boot-配置静态资源" class="headerlink" title="spring boot 配置静态资源"></a>spring boot 配置静态资源</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><strong>spring boot</strong>是一个适合进行快速开发的框架，<strong>spring boot</strong>奉行“习惯优于配置”的原则，其目的是为了简化应用的初始搭建。使用<br>java配置替代xml配置，并且内嵌了Tomcat容器，应用可以直接以jar包的形式运行。</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p>那么这里问题就来了：因为内嵌Tomcat，应用以java -jar的形式启动以后，假如有这样的场景，用户需要自定义头像，那么就需要上传图片，这个图片保存在哪呢？的确，应用中<strong>static</strong>文件夹会存放一些如logo.ico、jQuery.js这类的静态资源。那么用户自定义的图片也存放在这不合适吧。当然有小伙伴会想到把图片序列化成二进制数据保存到数据库中，这种方法也是可行的，但这样IO成本会增大；还有一种方法就是保存在服务器的本地文件夹中，由应用来读取本地的静态资源。</p><a id="more"></a><h3 id="spring-boot配置"><a href="#spring-boot配置" class="headerlink" title="spring boot配置"></a>spring boot配置</h3><blockquote><p>application.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server.port=5200</span><br><span class="line">server.session.timeout=3600</span><br><span class="line">server.context-path=/MySchool</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br><span class="line">server.tomcat.max-threads=20</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line"></span><br><span class="line">debug=false</span><br><span class="line">mybatis.mapper-locations=classpath:mapping/*.xml</span><br><span class="line">mybatis.type-aliases-package=com.ty.myschool.entity</span><br><span class="line"></span><br><span class="line">spring.mail.host=smtp.163.com</span><br><span class="line">spring.mail.username=123@163.com</span><br><span class="line">spring.mail.password=123</span><br><span class="line">spring.mail.properties.mail.smtp.auth=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.enable=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.required=true</span><br><span class="line">spring.mail.default-encoding=utf-8</span><br><span class="line"></span><br><span class="line">jdbc.type=mysql</span><br><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/onlineschool?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123</span><br><span class="line">jdbc.connectionTestQuery=SELECT 1 FROM dual</span><br><span class="line">jdbc.maximumPoolSize=12</span><br><span class="line">jdbc.minimumIdle=1</span><br><span class="line">jdbc.maxLifetime=2000000</span><br><span class="line">jdbc.connectionTimeout=30000</span><br><span class="line">jdbc.idleTimeout=30000</span><br><span class="line"></span><br><span class="line">mail.findPassword.subject=密码重置邮件</span><br><span class="line">mail.findPassword.content=请点击以下链接&lt;br/&gt;&lt;a href=&apos;&#123;0&#125;&apos;&gt;重置密码&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">static.url=/usr/local/project/myschool/static/</span><br><span class="line">static.picture.url=file/pictures/</span><br><span class="line">static.video.url=file/videos/</span><br><span class="line">static.websource.url=file/websource/</span><br></pre></td></tr></table></figure><blockquote><p>adapter</p></blockquote><p>这里需要写一个<strong>@configuration</strong>标注的继承WebMvcConfigurerAdapter的类，参考如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class WebSourceAdapter  extends WebMvcConfigurerAdapter&#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;static.url&#125;&quot;)</span><br><span class="line">    private String staticUrl;</span><br><span class="line">    @Value(&quot;$&#123;static.picture.url&#125;&quot;)</span><br><span class="line">    private String pictureUrl;</span><br><span class="line">    @Value(&quot;$&#123;static.video.url&#125;&quot;)</span><br><span class="line">    private String videoUrl;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(&quot;/file/pictures/**&quot;).addResourceLocations(&quot;file:&quot;+staticUrl+pictureUrl);</span><br><span class="line">        registry.addResourceHandler(&quot;/file/videos/**&quot;).addResourceLocations(&quot;file:&quot;+staticUrl+videoUrl);</span><br><span class="line">        super.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是代码方式拦截器来映射静态资源，<strong>file：</strong>的作用是定位到本地的文件夹，这里的意思是请求的路径为<strong>/file/pictures/</strong>去定位到本地文件夹中去寻找资源。</p><hr><p>接下来我用的虚拟机，系统是centos6.5来模拟服务器。<br>应用打jar包上传后进行启动。<br><br><br>因为应用中没写保存文件的方法，这里我写了一个测试类，并且在源路径上放置一张图片，执行测试方法以后，图片保存到配置文件中的目标路径中，<br>再由浏览器直接访问。</p><blockquote><p>Test.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        String baseUrl=&quot;/root/nginx/image/1.jpg&quot;;</span><br><span class="line">        String targetUrl=&quot;/usr/local/project/myschool/static/&quot;+&quot;file/pictures/&quot;;</span><br><span class="line">        File file=new File(baseUrl);</span><br><span class="line">        File outfile=new File(targetUrl);</span><br><span class="line">        if(!outfile.exists())&#123;</span><br><span class="line">            outfile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        FileInputStream fileInputStream = new FileInputStream(file);</span><br><span class="line">        FileOutputStream fileOutputStream = new FileOutputStream(targetUrl+&quot;mana.jpg&quot;);</span><br><span class="line">        int len=0;</span><br><span class="line">        byte b[] = new byte[1024];</span><br><span class="line">        while ((len = fileInputStream.read(b)) != -1) &#123;</span><br><span class="line">            fileOutputStream.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.flush();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面是源路径/root/nginx/image/1.jpg</p></blockquote><p><img src="https://s1.ax1x.com/2018/01/02/ppVKKO.jpg" alt="tu1"></p><p><br></p><blockquote><p>然后请求链接，没找到资源。<br><a href="http://192.168.1.13:5200/MySchool/file/pictures/mana.jpg" target="_blank" rel="external">http://192.168.1.13:5200/MySchool/file/pictures/mana.jpg</a></p></blockquote><p><img src="https://s1.ax1x.com/2018/01/02/ppVMrD.jpg" alt="tu2"></p><p><br></p><blockquote><p>接下来javac Test.java、 java Test编译执行测试类。再次访问以上链接。</p></blockquote><p><img src="https://s1.ax1x.com/2018/01/02/ppV1VH.jpg" alt="tu3"></p><p><br></p><blockquote><p>访问目标路径，发现文件夹下已存在图片。</p></blockquote><p><img src="https://s1.ax1x.com/2018/01/02/ppV3ad.jpg" alt="tu4"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>这个小测试算是完成了，对于http请求的动静分离我们还可以使用nginx来进行反向代理，下次我再使用nginx来做一次测试。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-boot-配置静态资源&quot;&gt;&lt;a href=&quot;#spring-boot-配置静态资源&quot; class=&quot;headerlink&quot; title=&quot;spring boot 配置静态资源&quot;&gt;&lt;/a&gt;spring boot 配置静态资源&lt;/h1&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;spring boot&lt;/strong&gt;是一个适合进行快速开发的框架，&lt;strong&gt;spring boot&lt;/strong&gt;奉行“习惯优于配置”的原则，其目的是为了简化应用的初始搭建。使用&lt;br&gt;java配置替代xml配置，并且内嵌了Tomcat容器，应用可以直接以jar包的形式运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/h2&gt;&lt;p&gt;那么这里问题就来了：因为内嵌Tomcat，应用以java -jar的形式启动以后，假如有这样的场景，用户需要自定义头像，那么就需要上传图片，这个图片保存在哪呢？的确，应用中&lt;strong&gt;static&lt;/strong&gt;文件夹会存放一些如logo.ico、jQuery.js这类的静态资源。那么用户自定义的图片也存放在这不合适吧。当然有小伙伴会想到把图片序列化成二进制数据保存到数据库中，这种方法也是可行的，但这样IO成本会增大；还有一种方法就是保存在服务器的本地文件夹中，由应用来读取本地的静态资源。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://ash1daMANA.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://ash1daMANA.github.io/tags/java/"/>
    
      <category term="spring" scheme="http://ash1daMANA.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="http://ash1daMANA.github.io/2017/11/21/linux/"/>
    <id>http://ash1daMANA.github.io/2017/11/21/linux/</id>
    <published>2017-11-21T07:37:20.000Z</published>
    <updated>2017-11-21T07:59:23.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux-常用命令整理"><a href="#linux-常用命令整理" class="headerlink" title="linux 常用命令整理"></a>linux 常用命令整理</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux-常用命令整理&quot;&gt;&lt;a href=&quot;#linux-常用命令整理&quot; class=&quot;headerlink&quot; title=&quot;linux 常用命令整理&quot;&gt;&lt;/a&gt;linux 常用命令整理&lt;/h2&gt;
      
    
    </summary>
    
      <category term="linux" scheme="http://ash1daMANA.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://ash1daMANA.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>maven</title>
    <link href="http://ash1daMANA.github.io/2017/11/21/maven/"/>
    <id>http://ash1daMANA.github.io/2017/11/21/maven/</id>
    <published>2017-11-21T07:37:20.000Z</published>
    <updated>2017-11-21T07:59:33.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pom-xml-配置-相关整理"><a href="#pom-xml-配置-相关整理" class="headerlink" title="pom.xml 配置 相关整理"></a>pom.xml 配置 相关整理</h3><blockquote><p>packaging</p></blockquote><hr><a id="more"></a><blockquote><p>properties</p></blockquote><hr><blockquote><p>dependency</p></blockquote><hr><blockquote><blockquote><p>optional</p></blockquote></blockquote><hr><blockquote><blockquote><p>test</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;pom-xml-配置-相关整理&quot;&gt;&lt;a href=&quot;#pom-xml-配置-相关整理&quot; class=&quot;headerlink&quot; title=&quot;pom.xml 配置 相关整理&quot;&gt;&lt;/a&gt;pom.xml 配置 相关整理&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;packaging&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="maven" scheme="http://ash1daMANA.github.io/categories/maven/"/>
    
    
      <category term="maven" scheme="http://ash1daMANA.github.io/tags/maven/"/>
    
      <category term="pom.xml" scheme="http://ash1daMANA.github.io/tags/pom-xml/"/>
    
  </entry>
  
  <entry>
    <title>win10下解决MarkdownPad2 html渲染出错的问题</title>
    <link href="http://ash1daMANA.github.io/2017/11/15/1/"/>
    <id>http://ash1daMANA.github.io/2017/11/15/1/</id>
    <published>2017-11-15T10:26:18.324Z</published>
    <updated>2017-11-20T15:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>第一次使用MarkdownPad2的小伙伴可能会遇到这个问题：html渲染组件出错。根据官方说法，win8系统中会存在这个问题，当然win10也不例外。<br><a id="more"></a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了修复这个问题，你需要安装一个SDK工具包  </p><blockquote><p>please click here ! <a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" target="_blank" rel="external">Awesomium 1.6.6 SDK</a></p></blockquote><p>若以上方案没有解决的话，再尝试安装个微软的渲染插件</p><blockquote><p>please click here ! <a href="http://www.microsoft.com/en-us/download/details.aspx?id=8109" target="_blank" rel="external">Microsoft’s DirectX End-User Runtimes (June 2010).</a></p></blockquote><p>若以上方案都没有解决的话 <strong>那换个电（工）脑（具）吧</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;第一次使用MarkdownPad2的小伙伴可能会遇到这个问题：html渲染组件出错。根据官方说法，win8系统中会存在这个问题，当然win10也不例外。&lt;br&gt;
    
    </summary>
    
      <category term="markdown" scheme="http://ash1daMANA.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://ash1daMANA.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
